<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Amy Hanlon</title><link href="http://amygdalama.github.io/" rel="alternate"></link><link href="http://amygdalama.github.io/feeds/all.atom.xml" rel="self"></link><id>http://amygdalama.github.io/</id><updated>2015-06-14T00:00:00-04:00</updated><entry><title>Module objects are global!</title><link href="http://amygdalama.github.io/module-objects-are-global.html" rel="alternate"></link><updated>2015-06-14T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2015-06-14:module-objects-are-global.html</id><summary type="html">&lt;p&gt;One of my favorite kinds of bugs is when a test that seems entirely unrelated to a code change fails. I've trained myself to look for the common causes, usually having to deal with shared state due to a test missing a proper teardown. But this week, I had a new kind of failure, one to do with module objects and how Python's import mechanism works, which, if you didn't know, is also &lt;a href="http://mathamy.com/import-accio-bootstrapping-python-grammar.html"&gt;one of my favorite things&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've been experimenting with &lt;a href="https://github.com/joke2k/faker"&gt;faker&lt;/a&gt;, a package for generating random phone numbers, email addresses, etc, for use in tests. My goal was to have a wide surface area of phone numbers used across tests, but also for each test to use the same phone number(s) every test run.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;faker&lt;/code&gt; is pretty simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;faker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;742-547-3459x52762&amp;#39;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;742-547-3459x52762&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, I'm seeding the &lt;code&gt;Faker&lt;/code&gt; instance so we get the same phone number for each call. Having to do this in the setup for every test, though, seemed like a lot of tedious work, and probably easy to forget, so I wanted to see if I could build a nose plugin that would seed a &lt;code&gt;Faker&lt;/code&gt; instance for me based on the hash of the test name.&lt;/p&gt;
&lt;p&gt;This worked great... until I ran our entire test suite, and a test that &lt;em&gt;didn't&lt;/em&gt; use &lt;code&gt;faker&lt;/code&gt; mysteriously started failing due to an invalid phone number.&lt;/p&gt;
&lt;p&gt;However, after a bit of digging, I found that the failing test &lt;em&gt;did&lt;/em&gt; use the &lt;code&gt;random&lt;/code&gt; module, generating a phone number like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;phone_number_digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I immediately recognize that this has some possibility to generate an invalid phone number (&lt;code&gt;999&lt;/code&gt; isn't a valid area code). I try running the test suite again, assuming that there's a small chance that this test will fail, and maybe I just got unlucky. Nope, it failed a second time. No matter how many times I run the test suite, this test fails.&lt;/p&gt;
&lt;p&gt;Hrm.&lt;/p&gt;
&lt;p&gt;Does seeding &lt;code&gt;faker&lt;/code&gt; also seed &lt;code&gt;random&lt;/code&gt;? Let's test this out in our REPL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;85&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;85&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;85&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! So &lt;code&gt;faker&lt;/code&gt; seeds &lt;code&gt;random&lt;/code&gt;. But how does that work? Time to look at the source for &lt;code&gt;faker&lt;/code&gt; to see how &lt;code&gt;seed&lt;/code&gt; works. &lt;a href="https://github.com/joke2k/faker/blob/e036b29268d346000453211d6f3153e99bdc2fe6/faker/generator.py#L52"&gt;Here's&lt;/a&gt; the relevant code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Calls random.seed&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's a summary of what we know so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;module &lt;code&gt;a&lt;/code&gt; imports module &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;module &lt;code&gt;b&lt;/code&gt; seeds &lt;code&gt;random&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;as a result, &lt;code&gt;random&lt;/code&gt; is &lt;em&gt;also&lt;/em&gt; seeded in module &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This must mean that the &lt;code&gt;random&lt;/code&gt; imported in &lt;code&gt;a&lt;/code&gt; is the &lt;em&gt;same&lt;/em&gt; module object as the &lt;code&gt;random&lt;/code&gt; imported in &lt;code&gt;b&lt;/code&gt;. So if this is the case, we can do things like add attributes to &lt;code&gt;random&lt;/code&gt; in one module, and access them in another module. Let's try!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# a.py:&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defined_in_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hi!&amp;quot;&lt;/span&gt;


&lt;span class="c"&gt;# b.py:&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defined_in_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we try running &lt;code&gt;b.py&lt;/code&gt;, do we get a &lt;code&gt;NameError&lt;/code&gt;? Or does this resolve and print &lt;code&gt;"hi!"&lt;/code&gt;? Let's see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python b.py
&lt;span class="go"&gt;hi!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neat. So module objects are global. For more on how this works, this documentation might be helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/import.html#the-import-system"&gt;the import system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.4/library/sys.html#sys.modules"&gt;sys. modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're thinking that it's probably bad that seeding &lt;code&gt;faker&lt;/code&gt; has side-effects outside of &lt;code&gt;faker&lt;/code&gt;, you're right! &lt;a href="https://github.com/joke2k/faker/issues/14"&gt;Here's&lt;/a&gt; a ticket explaining why this is a problem and some possible solutions.&lt;/p&gt;</summary><category term="python"></category><category term="import"></category><category term="debugging"></category></entry><entry><title>Things you can do other than scoffing at someone</title><link href="http://amygdalama.github.io/scoffing.html" rel="alternate"></link><updated>2015-05-16T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2015-05-16:scoffing.html</id><summary type="html">&lt;p&gt;Things you can do other than scoffing at someone who says they use a technology you heard was horrible: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ask them about it, maybe they know things you don't know&lt;/li&gt;
&lt;li&gt;change the subject&lt;/li&gt;
&lt;li&gt;say something nice, like "I like your hat"&lt;/li&gt;
&lt;li&gt;don't do or say anything&lt;/li&gt;
&lt;li&gt;excuse yourself from the conversation&lt;/li&gt;
&lt;li&gt;use this moment to grow as a person&lt;/li&gt;
&lt;li&gt;say "oh, how interesting" even though you don't think it's interesting, while secretly judging them because you are clearly smarter and more experienced and knowledgeable than they are&lt;/li&gt;
&lt;li&gt;tell them what you really think, which is that you're clearly smarter and more experienced and knowledgeable than they are, because you read this one article on HN that said that this technology they use fucking sucks, and then, mid-sentence, have a rare moment of reflection in which you realize that your feelings of superiority aren't relevant to the conversation at hand, and that maybe you could &lt;em&gt;not&lt;/em&gt; go around making other people feel bad about themselves in order to make yourself feel better all the time, and maybe this compulsion you have to assert dominance is actually due to your own self consciousness and fear&lt;/li&gt;
&lt;/ul&gt;</summary><category term=""></category></entry><entry><title>PyCon Recording: Investigating Python Wats</title><link href="http://amygdalama.github.io/pycon-recording-investigating-python-wats.html" rel="alternate"></link><updated>2015-04-18T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2015-04-18:pycon-recording-investigating-python-wats.html</id><summary type="html">&lt;p&gt;Many of us have experienced a "wat" in Python - some behavior that totally mystifies us. Here is my PyCon talk on Investigating Python Wats, where we uncover some surprising implementation details of CPython, some unexpected consequences of mutability, and details of scope and name resolution.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sH4XF6pKKmk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="speaking"></category><category term="pycon"></category><category term="python"></category><category term="wats"></category></entry><entry><title>AlterConf: A Conference to Emulate</title><link href="http://amygdalama.github.io/alterconf.html" rel="alternate"></link><updated>2014-10-05T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-10-05:alterconf.html</id><summary type="html">&lt;p&gt;Yesterday I attended &lt;a href="http://www.alterconf.com/"&gt;AlterConf&lt;/a&gt;, a conference about diversity in the tech and gaming industries, hosted by &lt;a href="http://www.ashedryden.com/"&gt;Ashe Dryden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The talks were enlightening, personal, and hopeful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thebitchwhocodes.com/"&gt;Stacey Mulcahy&lt;/a&gt; and &lt;a href="https://twitter.com/cattsmall"&gt;Catt Small&lt;/a&gt; on lessons they've learned running the &lt;a href="http://codeliberation.org/"&gt;Code Liberation Foundation&lt;/a&gt;, an organization that offers free game development workshops for women&lt;/li&gt;
&lt;li&gt;&lt;a href="http://manamaneco.blogspot.com/"&gt;Manuel Marcano&lt;/a&gt; on avoiding Native American stereotypes in games&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.davidpeter.me/"&gt;David Peter&lt;/a&gt; on what deafness is, his experiences being deaf, and what we can do to be more inclusive&lt;/li&gt;
&lt;li&gt;&lt;a href="http://anewchallengerawaits.com/general/"&gt;Shawn Alexander Allen&lt;/a&gt; on how underrepresented game designers have used Kickstarter to crowdfund their games&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubywankenoobie.tumblr.com/"&gt;Stephanie Morillo&lt;/a&gt; on her experiences learning to code while growing up in the Bronx and how lack of exposure is blocking entire communities from startups and the tech industry&lt;/li&gt;
&lt;li&gt;&lt;a href="http://senongo.net/"&gt;Senongo Akpem&lt;/a&gt; on the booming tech scene in Nigeria&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/chrisalgoo"&gt;Chris Algoo&lt;/a&gt; on lessons learned organizing diversity-focused game jams through &lt;a href="http://www.brooklyngamery.com/"&gt;Brooklyn Gamery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sinthetix"&gt;Aly Ferguson&lt;/a&gt; on how gaming has a tremendous impact in mental, physical, and social rehabilitation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arlduc.org/"&gt;Arlene Ducao&lt;/a&gt; on her experiences with micro-discrimination at MIT Media Lab and the relationship between US startup culture and imperialism&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AlterConf has the most diverse set of speakers I've ever seen at a conference. This is not a coincidence. I'd like to emphasize a few details of AlterConf that made the environment particularly safe and welcoming, in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explicit focus on all aspects of diversity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AlterConf/status/506929157688000512"&gt;all gender restrooms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;preferred pronouns on nametags&lt;/li&gt;
&lt;li&gt;taped-off mobility zones&lt;/li&gt;
&lt;li&gt;ADA accessible, and near ADA accessible public transportation&lt;/li&gt;
&lt;li&gt;real-time captioning (Lindsey Kuper wrote a great &lt;a href="http://composition.al/blog/2014/05/31/your-next-conference-should-have-real-time-captioning/"&gt;post&lt;/a&gt; about why !!Con provided this)&lt;/li&gt;
&lt;li&gt;sign language interpreters&lt;/li&gt;
&lt;li&gt;hyper-local (reduced travel costs for attendees and speakers)&lt;/li&gt;
&lt;li&gt;sliding-scale tickets&lt;/li&gt;
&lt;li&gt;speaker compensation&lt;/li&gt;
&lt;li&gt;first-time speakers&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alterconf.com/code-of-conduct"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;food and &lt;em&gt;non-alchoholic&lt;/em&gt; drinks&lt;/li&gt;
&lt;li&gt;content/trigger warnings when appropriate&lt;/li&gt;
&lt;li&gt;no forced networking&lt;/li&gt;
&lt;li&gt;side rooms available to take breaks from being social&lt;/li&gt;
&lt;li&gt;plenty of breaks between talks&lt;/li&gt;
&lt;li&gt;optional partners to walk with you to your subway station, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's clear that the organizers put a &lt;em&gt;ton&lt;/em&gt; of work into making the conference safe and accessible for everyone, and their work paid off in an exceptionally diverse set of speakers and attendees. This is what can happen when organizers shift their focus from providing social events and happy hours to making their conference safe and accessible.&lt;/p&gt;</summary><category term="alterconf"></category><category term="diversity"></category><category term="conferences"></category></entry><entry><title>Python Wats: Mutable Default Arguments</title><link href="http://amygdalama.github.io/python-wats-mutable-default-arguments.html" rel="alternate"></link><updated>2014-04-25T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-25:python-wats-mutable-default-arguments.html</id><summary type="html">&lt;p&gt;Let's look at a common Python &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;wat&lt;/a&gt; and try to figure out wat's actually happening!&lt;/p&gt;
&lt;p&gt;We'll define a function, &lt;code&gt;foo&lt;/code&gt;, which takes one argument, &lt;code&gt;l&lt;/code&gt;, which has the default value of an empty list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens when we call &lt;code&gt;foo&lt;/code&gt; multiple times?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;, &amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whoa! So mutating &lt;code&gt;l&lt;/code&gt; actually mutates it for all future calls to the function. Weird.&lt;/p&gt;
&lt;p&gt;This means that the &lt;code&gt;[]&lt;/code&gt; object is &lt;em&gt;only created once&lt;/em&gt;, and each time we call &lt;code&gt;foo&lt;/code&gt; without an argument, &lt;code&gt;l&lt;/code&gt; is referring to that same object. This may lead you to form a hypothesis: &lt;code&gt;l=[]&lt;/code&gt; is kind of like a name-binding statement that executes only once, when the function is defined.&lt;/p&gt;
&lt;p&gt;But, if that hypothesis is true, then how should we expect the following function to behave?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;# ?&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;# ?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, if &lt;code&gt;l=[]&lt;/code&gt; is &lt;em&gt;like a name-binding statement that executes only once&lt;/em&gt; when the function is defined, then I would expect something like this sequence of events to happen, when we define &lt;code&gt;bar&lt;/code&gt; and then call it twice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is defined&lt;ul&gt;
&lt;li&gt;the name &lt;code&gt;l&lt;/code&gt; is bound to the object &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called the first time:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; should return &lt;code&gt;{l : []}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then we reassign &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt; within the scope of &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; should return &lt;code&gt;['cat']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called again:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l=[]&lt;/code&gt; is not executed (based on our assumption)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; should either return &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;{l : ['cat']}&lt;/code&gt;, depending on if the assignment of &lt;code&gt;l = ['cat']&lt;/code&gt; persists after the function is called the first time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; should return &lt;code&gt;['cat']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What actually happens?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrm. This behavior reasonably leads us to believe that the assignment &lt;code&gt;l=[]&lt;/code&gt; happens &lt;em&gt;each time we call the function &lt;code&gt;bar&lt;/code&gt;&lt;/em&gt;. But in &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;l=[]&lt;/code&gt; can't be a statement that executes each time the function is called, or else we'd create a new &lt;code&gt;[]&lt;/code&gt; each time.&lt;/p&gt;
&lt;p&gt;If we assume &lt;code&gt;l=[]&lt;/code&gt; executes like a name-binding statement, then it must execute either (1) only once when the function is defined, or (2) each time the function is called. In &lt;code&gt;foo&lt;/code&gt;, it only executes once, but in &lt;code&gt;bar&lt;/code&gt;, it executes every time we call &lt;code&gt;bar&lt;/code&gt;. That just can't be. So our assumption that &lt;code&gt;l=[]&lt;/code&gt; executes like a name-binding statement leads to a contradiction, and thus must be wrong!&lt;/p&gt;
&lt;p&gt;Guess what, nerds! We kind of just did a &lt;a href="http://en.wikipedia.org/wiki/Proof_by_contradiction"&gt;proof by contradiction&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;So then what really happens when we define default values for arguments? Let's see if we can figure out where the default values are stored.&lt;/p&gt;
&lt;p&gt;My usual go-to for questions like this is Python internals whiz and Hacker School Facilitator &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, but you can also find the answer with a bit of &lt;a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=python%20mutable%20default%20arguments"&gt;googling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, without further ado, what actually happens when we define a default argument in Python 2.x is that the value of the argument gets stored inside the function's &lt;code&gt;func_defaults&lt;/code&gt; method. (In 3.x, the values are stored in the &lt;code&gt;__defaults__&lt;/code&gt; method.)&lt;/p&gt;
&lt;p&gt;Let's look back at the &lt;code&gt;foo&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python 2.x, we can access &lt;code&gt;foo&lt;/code&gt;'s &lt;code&gt;func_defaults&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="go"&gt;([],)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="go"&gt;([&amp;#39;cat&amp;#39;],)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! So the actual object that is being stored as the default for &lt;code&gt;foo&lt;/code&gt; is being modified when we call &lt;code&gt;foo&lt;/code&gt;! For fun, let's see if we can mutate the default value from outside of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dragon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="go"&gt;([&amp;#39;cat&amp;#39;, &amp;#39;dragon&amp;#39;],)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;, &amp;#39;dragon&amp;#39;, &amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eep! That was fun. So what's in the &lt;code&gt;func_defaults&lt;/code&gt; of &lt;code&gt;bar&lt;/code&gt;? Recall:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="go"&gt;([],)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="go"&gt;([],)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay! So since &lt;code&gt;bar&lt;/code&gt; &lt;em&gt;reassigns&lt;/em&gt; &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt;, it doesn't modify the object stored in &lt;code&gt;func_defaults&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what have we learned?&lt;/p&gt;
&lt;p&gt;It appears as if the following happens when we define and call &lt;code&gt;bar&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is defined&lt;ul&gt;
&lt;li&gt;the object &lt;code&gt;[]&lt;/code&gt; is created and stored in the &lt;code&gt;func_defaults&lt;/code&gt; tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called the first time:&lt;ul&gt;
&lt;li&gt;since we didn't pass in a value for &lt;code&gt;l&lt;/code&gt; as an argument, Python looks in the &lt;code&gt;func_defaults&lt;/code&gt; for the value to bind to the name &lt;code&gt;l&lt;/code&gt;, and grabs the &lt;code&gt;[]&lt;/code&gt; object that we created when we defined &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; returns &lt;code&gt;{l : []}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we reassign &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt; within the scope of &lt;code&gt;bar&lt;/code&gt;. Since this is a reassignment, this doesn't modify the &lt;code&gt;[]&lt;/code&gt; object contained in &lt;code&gt;func_defaults&lt;/code&gt;. Instead, &lt;code&gt;l&lt;/code&gt; is just bound to a different object in memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;['cat']&lt;/code&gt; is returned&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called again:&lt;ul&gt;
&lt;li&gt;since we didn't modify the &lt;code&gt;[]&lt;/code&gt; object the first time we called &lt;code&gt;bar&lt;/code&gt;, the same series of events happens as in step 2!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I should probably also mention something more useful: a common way of setting a default value to an empty list (and having it actually work as expected) is to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we call &lt;code&gt;baz&lt;/code&gt; multiple times, its behavior is more expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! Wat conquered. We should collect badges for all the wats we've battled.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://maryrosecook.com/"&gt;Mary Rose Cook&lt;/a&gt; and &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, who valiantly battled this wat with me.&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category></entry><entry><title>Introducing Iron Maker Or Forger Or Something</title><link href="http://amygdalama.github.io/introducing-iron-maker-or-forger-or-something.html" rel="alternate"></link><updated>2014-04-19T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-19:introducing-iron-maker-or-forger-or-something.html</id><summary type="html">&lt;p&gt;The end of &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; is quickly approaching and a thousand kittens are crying tears of sadness!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/cat-crying.gif" /&gt;&lt;/p&gt;
&lt;p&gt;In order to maintain momentum and Never Graduate, I'm challenging myself and some other Hacker Schoolers to complete a programming project once a week for two(?) months.  &lt;/p&gt;
&lt;p&gt;This challenge is inspired by Iron Blogger, which requires participants to blog once a week, and if you miss a week, you owe $5. Mike Walker, from the Fall 2013 batch of Hacker School, &lt;a href="http://blog.lazerwalker.com/blog/2013/12/24/one-post-a-week-running-an-iron-blogger-challenge"&gt;wrote extensively&lt;/a&gt; about Iron Blogger.  &lt;/p&gt;
&lt;p&gt;The difference with Iron Maker, or Iron Forger, or Iron Something-Clever-That-Will-Hopefully-Come-To-Me-In-The-Near-Future, is that we will be completing small, self-contained programming projects, rather than writing blog posts.  &lt;/p&gt;
&lt;p&gt;Specifically, I want to work on projects that take about 4-8 hours to complete, and center around making, for lack of a better word, a &lt;em&gt;product&lt;/em&gt;. &lt;/p&gt;
&lt;h2 id="criteria"&gt;Criteria&lt;/h2&gt;
&lt;p&gt;A few days ago, I &lt;a href="https://twitter.com/amygdalama/status/456950130286292992"&gt;asked Twitter&lt;/a&gt; for project ideas, but I hadn't yet figured out how to explicitly define criteria for what I was looking for. &lt;a href="https://twitter.com/moss"&gt;Moss Collum&lt;/a&gt; responded with an excellent &lt;a href="http://makingcodespeak.com/2014/04/18/tiny-projects.html"&gt;blog post&lt;/a&gt;, which includes some defining characteristics of good projects:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short&lt;/strong&gt;: I can see interesting results within a few hours, and some results even sooner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;End-to-end&lt;/strong&gt;: The project produces real software with a user-interface (even if it’s a simple one like a command-line script).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expandable&lt;/strong&gt;: Once I have some working code, it should be easy to think of new features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt;: There should be room to change requirements over time in ways that break my assumptions and test my code’s ability to evolve&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fun&lt;/strong&gt;: The problem should be something I can care about enough to stay engaged.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id="purpose"&gt;Purpose&lt;/h2&gt;
&lt;p&gt;These projects are not intended to result in products that people will actually use. Instead, the intention is to get exposure to new tools and concepts and to practice making software design decisions. &lt;/p&gt;
&lt;h2 id="suggested-projects"&gt;Suggested Projects&lt;/h2&gt;
&lt;p&gt;I'll be maintaining a &lt;a href="https://github.com/amygdalama/programming-projects"&gt;list&lt;/a&gt; of suggested projects on GitHub. I'm trying to keep the list short, manageable, and high-quality, so I'm only adding projects that I'm committed to working on, and then for each project I'll be adding details on how long it took and what parts were fun/challenging/easy/boring.&lt;/p&gt;
&lt;p&gt;The repo also contains a list of resources with much more extensive project lists. If I'm missing any good resources, of if you've completed any small projects that have been particularly enlightening, please submit a pull request or create an issue! &lt;/p&gt;</summary><category term="hacker school"></category></entry><entry><title>Python Closures and Free Variables</title><link href="http://amygdalama.github.io/python-closures-and-free-variables.html" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-10:python-closures-and-free-variables.html</id><summary type="html">&lt;p&gt;Today, friends, we will continue to dissect functional programming concepts in Python. We're going to try to figure out what the hell is going on in this chunk of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens when we pass &lt;code&gt;make_contains_function&lt;/code&gt; a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;function contains at 0x10a1e2cf8&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get a function! Whoa. A function that returns a function. Cool. Let's assign this returned function a name and try to use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;function contains at 0x10a1e2c80&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create a function called &lt;code&gt;contains_a&lt;/code&gt; by calling the &lt;code&gt;make_contains_function&lt;/code&gt; and passing the string &lt;code&gt;'a'&lt;/code&gt; as a parameter. Then, when we pass &lt;code&gt;contains_a&lt;/code&gt; a string, the function returns a boolean representing whether &lt;code&gt;'a'&lt;/code&gt; is in the string or not.&lt;/p&gt;
&lt;p&gt;Let's look at the original code again and try to understand what it does and why it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First let's translate this to English. We're creating a function called &lt;code&gt;make_contains_function&lt;/code&gt;, which takes one parameter, &lt;code&gt;x&lt;/code&gt;. In the body of the &lt;code&gt;make_contains_function&lt;/code&gt;, we create an inner function called &lt;code&gt;contains&lt;/code&gt;, which takes one parameter, &lt;code&gt;s&lt;/code&gt;. The inner function returns &lt;code&gt;x in s&lt;/code&gt;, and then the outer function returns the inner function.&lt;/p&gt;
&lt;p&gt;But how does &lt;code&gt;contains&lt;/code&gt; have access to &lt;code&gt;x&lt;/code&gt;? Shouldn't that throw a &lt;code&gt;NameError&lt;/code&gt;? Here's my mental model for how Python looks up the value associated with a name of a variable, &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;locals()&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;locals()&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;globals()&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;globals()&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;__builtins__.__dict__&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;__builtins__.__dict__&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, throw a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My mental model for how &lt;code&gt;locals()&lt;/code&gt; works is that it returns all local variables, which are defined in the &lt;em&gt;most narrowly-defined&lt;/em&gt; current scope. In the case of &lt;code&gt;x&lt;/code&gt; in our example, the most narrowly-defined current scope is the function &lt;code&gt;contains&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; isn't assigned a value within the function &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;locals()&lt;/code&gt; won't contain a value for &lt;code&gt;x&lt;/code&gt; (based on my mental model).&lt;/p&gt;
&lt;p&gt;My model for how &lt;code&gt;globals()&lt;/code&gt; works is that it returns the variables which are defined at the module-level (i.e. variables which aren't defined within a scope like a function or a class. Since &lt;code&gt;x&lt;/code&gt; is defined within a function, namely within the &lt;code&gt;make_contains_function&lt;/code&gt;, it won't be included in the &lt;code&gt;globals()&lt;/code&gt; dictionary either.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is pretty clearly not defined in &lt;code&gt;__builtins__.__dict__&lt;/code&gt;, because it isn't defined in the &lt;code&gt;builtin&lt;/code&gt; module. (It isn't automatically imported any time you run Python).&lt;/p&gt;
&lt;p&gt;Poor &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So is my mental model correct? If it is, we should be getting a &lt;code&gt;NameError&lt;/code&gt; when we execute the &lt;code&gt;contains_a&lt;/code&gt; or &lt;code&gt;contains_b&lt;/code&gt; functions. Since we're not getting a &lt;code&gt;NameError&lt;/code&gt;, something about my mental model must be inaccurate.&lt;/p&gt;
&lt;p&gt;Shucks.&lt;/p&gt;
&lt;p&gt;Let's try printing the &lt;code&gt;locals()&lt;/code&gt; within each of the functions in our code block, to see where &lt;code&gt;x&lt;/code&gt; is defined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Inside make_contains_function&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;locals(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Inside contains function&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;locals(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If my mental model is correct, &lt;code&gt;x&lt;/code&gt; should be returned by &lt;code&gt;locals()&lt;/code&gt; within the &lt;code&gt;make_contains_function&lt;/code&gt;, but not by &lt;code&gt;locals()&lt;/code&gt; within the &lt;code&gt;contains&lt;/code&gt; function. Let's put my model to the test!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Inside make_contains_function&lt;/span&gt;
&lt;span class="go"&gt;locals():  {&amp;#39;x&amp;#39;: &amp;#39;a&amp;#39;}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Inside contains function&lt;/span&gt;
&lt;span class="go"&gt;locals():  {&amp;#39;x&amp;#39;: &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;: &amp;#39;cat&amp;#39;}&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh! So &lt;code&gt;x&lt;/code&gt; is returned by &lt;code&gt;locals()&lt;/code&gt; inside the &lt;code&gt;contains&lt;/code&gt; function. That's why we don't get a &lt;code&gt;NameError&lt;/code&gt; when we try using &lt;code&gt;x&lt;/code&gt;. My mental model of how &lt;code&gt;locals()&lt;/code&gt; works and what it returns must be wrong. Let's look at the &lt;a href="https://docs.python.org/2/library/functions.html#locals"&gt;documentation&lt;/a&gt; for &lt;code&gt;locals()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update and return a dictionary representing the current local symbol table. Free variables are returned by &lt;code&gt;locals()&lt;/code&gt; when it is called in function blocks but not in class blocks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hm. What is a "free variable"? Does that apply to our situation? I suspect it does. Either that or my definition of a local variable is wrong. Googling "python free variable" brings us to the trusty Python &lt;a href="https://docs.python.org/2/reference/executionmodel.html"&gt;Execution Model&lt;/a&gt; page, which I strongly believe every Python programmer should read and re-read often.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes visible to a code block is called the block's &lt;em&gt;environment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a &lt;em&gt;free variable&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's apply this information to our example, and list what we know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contains&lt;/code&gt; is a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is a free variable in &lt;code&gt;contains&lt;/code&gt;, because it is referenced in &lt;code&gt;contains&lt;/code&gt; but isn't defined there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Free variables are not local variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, free variables are returned when calling &lt;code&gt;locals()&lt;/code&gt; within a function block.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Okay! When Python looks up the name &lt;code&gt;x&lt;/code&gt;, it finds a value for it in the &lt;code&gt;locals()&lt;/code&gt; dictionary, even though &lt;code&gt;x&lt;/code&gt; isn't a local variable. My mental model wasn't &lt;em&gt;too&lt;/em&gt; far off. I just need to adjust how I think about how &lt;code&gt;locals()&lt;/code&gt; behaves within functions.&lt;/p&gt;
&lt;p&gt;And, so that you understand the title of this post, and so that you can sound smart around other programmers, you should know that a function that uses a &lt;em&gt;free variable&lt;/em&gt; is called a &lt;em&gt;closure&lt;/em&gt;. So, in our example, &lt;code&gt;x&lt;/code&gt; is a &lt;em&gt;free variable&lt;/em&gt; and the function &lt;code&gt;contains&lt;/code&gt; is a &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Credit to &lt;a href="https://twitter.com/ballingt"&gt;Tom Ballinger&lt;/a&gt; for the example code block and for intoducing me to &lt;a href="http://www.diveintopython3.net/"&gt;Dive Into Python3&lt;/a&gt;, an excellent read and the inspiration for this post.&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category><category term="functional programming"></category><category term="closures"></category></entry><entry><title>Dissecting the Reduce Function</title><link href="http://amygdalama.github.io/dissecting-the-reduce-function.html" rel="alternate"></link><updated>2014-04-07T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-07:dissecting-the-reduce-function.html</id><summary type="html">&lt;p&gt;Good morning, &lt;a href="http://www.vice.com/columns/good-morning-sinners-with-warren-ellis"&gt;sinners&lt;/a&gt;. Today we're going to figure out what the hell is going on inside a Python expression like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(What &lt;code&gt;things&lt;/code&gt; is doesn't matter too much, as long as it's an iterable. We'll look at a more specific example in a bit.)&lt;/p&gt;
&lt;p&gt;Mary Rose Cook &lt;a href="http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming"&gt;defines&lt;/a&gt; the &lt;code&gt;reduce&lt;/code&gt; function nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reduce takes a function and a collection of items. It returns a value that is created by combining the items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, the function passed as a parameter to the &lt;code&gt;reduce&lt;/code&gt; function is a &lt;code&gt;lambda&lt;/code&gt; statement, which Mary also defines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[A &lt;code&gt;lambda&lt;/code&gt; statement is] an anonymous, inlined function [...] The parameters of the &lt;code&gt;lambda&lt;/code&gt; are defined to the left of the colon. The function body is defined to the right of the colon. The result of running the function body is (implicitly) returned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A caveat: our &lt;code&gt;reduce&lt;/code&gt; function also takes in a third parameter, the empty string, which I'll discuss in detail later.&lt;/p&gt;
&lt;p&gt;Another caveat: if you're using Python3, &lt;code&gt;reduce&lt;/code&gt; is no longer a builtin function. To use it, you'll need to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, how do we better understand what's happening inside this expression?&lt;/p&gt;
&lt;h2 id="a-mental-model"&gt;A Mental Model&lt;/h2&gt;
&lt;p&gt;Let's look at a specific example of our expression and examine a mental model -- which may or may not be correct -- for what's happening to the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; inside the expression.&lt;/p&gt;
&lt;p&gt;I said earlier that &lt;code&gt;things&lt;/code&gt; needs to be an iterable. So, presumably, &lt;code&gt;things&lt;/code&gt; could be a string. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;012&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's going on in this statement? My (not functional) mental model for how this works is:&lt;/p&gt;
&lt;p&gt;For each &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;things&lt;/code&gt;, convert &lt;code&gt;x&lt;/code&gt; to a list and then append &lt;code&gt;[x]&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;, which starts as an empty list on the first iteration (this is because of the third parameter we passed to &lt;code&gt;reduce&lt;/code&gt;, which I'll explain later). After each iteration, &lt;code&gt;a&lt;/code&gt; grows one element longer (because we're adding whatever &lt;code&gt;[x]&lt;/code&gt; is during the iteration to &lt;code&gt;a&lt;/code&gt;). Return the result of the last iteration.&lt;/p&gt;
&lt;p&gt;So, the first time we pass &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; through to the &lt;code&gt;lambda&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;lambda&lt;/code&gt; then implicitly returns the list given by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second time we pass &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;lambda&lt;/code&gt;, we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# set `a` to the value the previous step implicitly returned&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the third and final step, we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So why did we have to pass &lt;code&gt;[]&lt;/code&gt; as the third parameter to &lt;code&gt;reduce&lt;/code&gt;? Well, if &lt;code&gt;reduce&lt;/code&gt; isn't given a third parameter, for the first iteration it sets &lt;code&gt;a = x&lt;/code&gt;, and then jumps to the second iteration. So, in my mental model, the first iteration would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# no calculation of a + [x]&lt;/span&gt;
&lt;span class="c"&gt;# instead, implicitly returns the value of `a`, which is &amp;#39;0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then in the second iteration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# set `a` to the value implicitly returned from the first iteration&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This results in an error because you can't concatenate a string and a list.&lt;/p&gt;
&lt;p&gt;Is my mental model correct? We can tell that the model ultimately returns the same value as the expression, but how can we tell if these are really the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; at each step?&lt;/p&gt;
&lt;h2 id="testing-the-model"&gt;Testing the Model&lt;/h2&gt;
&lt;p&gt;We'll need to figure out some clever way of printing or storing the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; at each step.&lt;/p&gt;
&lt;p&gt;Let's recall the original expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we append the value of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;. Could we also append the value of &lt;code&gt;a&lt;/code&gt; itself? Then maybe we could see what &lt;code&gt;a&lt;/code&gt; is at each step. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's a lot going on in that expression, so let's break it up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;012&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's apply the mental model to help us understand this example.&lt;/p&gt;
&lt;h4 id="step-1"&gt;Step 1:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c"&gt;# this step implicitly returns the value:&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="step-2"&gt;Step 2:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="step-3"&gt;Step 3:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
    &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
    &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty complicated and difficult to read. You might want to write out the steps for yourself. I did (obviously). And I screwed it up the first few times.&lt;/p&gt;
&lt;p&gt;Let's see if our result from step 3 is the same as what Python evaluates for our expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Victory! But what does this mean?&lt;/p&gt;
&lt;h2 id="wait-what-were-we-trying-to-do-again"&gt;Wait what were we trying to do again?&lt;/h2&gt;
&lt;p&gt;We've been attempting to understand what happens inside a &lt;code&gt;reduce&lt;/code&gt; function. We developed a mental model for what happens to the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; at each iteration, and we came up with a way to test to see if the mental model was accurate. And it was!&lt;/p&gt;
&lt;p&gt;I think this might be one of those posts that is less about what I intended it to be about (dissecting the &lt;code&gt;reduce&lt;/code&gt; function) and more about the approach I would take to accomplish what I intended it to be about. Meta, sinners.&lt;/p&gt;</summary><category term="hacker school"></category><category term="python"></category><category term="functional programming"></category></entry><entry><title>After Six Months of Learning The Python, I Can Finally Print "Hello World!"</title><link href="http://amygdalama.github.io/after-six-months-of-learning-the-python-i-can-finally-print-hello-world.html" rel="alternate"></link><updated>2014-04-01T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-01:after-six-months-of-learning-the-python-i-can-finally-print-hello-world.html</id><summary type="html">&lt;p&gt;I've been trying to learn how to write a function in the Python that prints two words, only two, "Hello World." I've been trying for six months. And today, friends, I've done it.&lt;/p&gt;
&lt;p&gt;I've read so many places that you can make print statements in the Python like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But where do you type this in? How do you tell the computer, the Python, the whatever, that you want it to take this sequence of characters, interpret it as code, and execute it?&lt;/p&gt;
&lt;p&gt;Well, I hope you are sitting down, because I've found the answer: the &lt;a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; statement (or function if you're into the Python 3)! &lt;/p&gt;
&lt;p&gt;Let's say you want the Python to execute the definition of a function like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can accomplish this by firing up the Python interpreter and typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def foo():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    print &amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; here takes in a string of the Python code and executes it! The &lt;code&gt;\n&lt;/code&gt; and the whitespace between the &lt;code&gt;\n&lt;/code&gt; and the &lt;code&gt;print&lt;/code&gt; statement are very important! The Python needs those to understand where the function ends.&lt;/p&gt;
&lt;p&gt;So now, we can see that &lt;code&gt;foo&lt;/code&gt; exists and is a function that prints "Hello World!"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;function foo at 0x10b611230&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; can also take in &lt;code&gt;code&lt;/code&gt; objects. We can make a &lt;code&gt;code&lt;/code&gt; object by using the &lt;a href="https://docs.python.org/2/library/functions.html#compile"&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def bar():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    print &amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f88b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;compile&lt;/code&gt; takes in a string of code, a filename (we can just pass it the empty string), and a mode, which can be 'exec', 'eval', or 'single'.&lt;/p&gt;
&lt;p&gt;Let's pass &lt;code&gt;c&lt;/code&gt; into &lt;code&gt;exec&lt;/code&gt; to execute the code and define our &lt;code&gt;bar&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes! We did it again! This is a victorious day. &lt;/p&gt;
&lt;p&gt;Interestingly enough, functions themselves have &lt;code&gt;code&lt;/code&gt; objects assigned to them as attributes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object bar at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can overwrite these &lt;code&gt;code&lt;/code&gt; objects with our own &lt;code&gt;code&lt;/code&gt; objects! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;new_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;print &amp;#39;Hello, We Are Victorious Beings!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;new_code&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_code&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello, We Are Victorious Beings!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neat! We don't need the &lt;code&gt;"def bar():"&lt;/code&gt; part in the string we pass to &lt;code&gt;compile&lt;/code&gt; because at this point, &lt;code&gt;bar&lt;/code&gt; already exists and we're just overwriting the code in the body of the &lt;code&gt;bar&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Share in the comments if you know of any other ways to print statements in the Python!&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category><category term="hello world"></category><category term="hacker school"></category></entry><entry><title>A Love Affair With Broken Things</title><link href="http://amygdalama.github.io/a-love-affair-with-broken-things.html" rel="alternate"></link><updated>2014-03-31T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-31:a-love-affair-with-broken-things.html</id><summary type="html">&lt;p&gt;I love broken things, unfinished things, breaking things, unfinishing things. Broken and unfinished things allow you to see the process in which they were created; their most intimate secrets are exposed.&lt;/p&gt;
&lt;h2 id="broken-statues"&gt;Broken Statues&lt;/h2&gt;
&lt;p&gt;A week ago, inside &lt;a href="http://www.metmuseum.org/en"&gt;The Metropolitan Museum of Art&lt;/a&gt;, my love for broken things was realized. Just &lt;em&gt;look&lt;/em&gt; at these. They're so &lt;em&gt;naked, vulnerable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some ladies, broken" src="/images/broken_ladies.JPG" title="broken ladies" /&gt;
&lt;img alt="a face, broken" src="/images/broken_face.JPG" title="broken face" /&gt;
&lt;img alt="a torso, broken" src="/images/broken_torso.JPG" title="broken torso" /&gt;&lt;/p&gt;
&lt;p&gt;Okay so some of them are literally naked, but you get the point. When a statue is broken, you can sneak a peek inside! You get so many clues about how it was made! Is it hollow? What's it made out of? Is the material on the outside the same as the inside? Does it have a frame?&lt;/p&gt;
&lt;h2 id="breaking-code"&gt;Breaking Code&lt;/h2&gt;
&lt;p&gt;While I can't bring myself to break art to get clues about the process of its creation, I &lt;em&gt;can&lt;/em&gt; break code! Breaking code is free and doesn't hurt anyone! (As long as you keep it local...) I do this quite a bit as a method of learning - removing the pieces of code that you don't understand reveals the purpose of those pieces. It's like removing the arm of a statue to look inside.&lt;/p&gt;
&lt;p&gt;Let's look at some code from Mary Rose Cook's functional programming &lt;a href="http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming"&gt;tutorial&lt;/a&gt; (which is amazing, and you should absolutely read it and do the exercises and spend time understanding it completely if you're at all interested in functional programming). We won't understand the code at first (or at least &lt;em&gt;I&lt;/em&gt; won't), but we'll take apart the pieces of the code in an attempt to better understand their purpose.&lt;/p&gt;
&lt;p&gt;Mary aptly explains what Python's builtin &lt;code&gt;map&lt;/code&gt; function does:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Map takes a function and a collection of items. It makes a new, empty collection, runs the function on each item in the original collection and inserts each return value into the new collection. It returns the new collection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Her first example for showing how &lt;code&gt;map&lt;/code&gt; works is fairly straightforward:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a simple map that takes a list of names and returns a list of the lengths of those names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;name_lengths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Isla&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name_lengths&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [4, 4, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;In the second example of &lt;code&gt;map&lt;/code&gt;, we see that Mary uses a &lt;code&gt;lambda&lt;/code&gt; function:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a map that squares every number in the passed collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [0, 1, 4, 9, 16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This map doesn’t take a named function. It takes an anonymous, inlined function defined with lambda. The parameters of the lambda are defined to the left of the colon. The function body is defined to the right of the colon. The result of running the function body is (implicitly) returned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But &lt;em&gt;why&lt;/em&gt; does Mary use a &lt;code&gt;lambda&lt;/code&gt; function here? Let's spend some time breaking this code and reconstructing it to understand why the &lt;code&gt;lambda&lt;/code&gt; function is used.&lt;/p&gt;
&lt;p&gt;First let's try removing the &lt;code&gt;lambda&lt;/code&gt; and seeing what happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;NameError&lt;/span&gt;: &lt;span class="n"&gt;name &amp;#39;x&amp;#39; is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay. &lt;code&gt;x&lt;/code&gt; is not defined. That makes sense, because &lt;code&gt;x&lt;/code&gt; isn't in our &lt;code&gt;locals&lt;/code&gt; or our &lt;code&gt;globals&lt;/code&gt; or our &lt;code&gt;builtins&lt;/code&gt;. Remember that when Python sees the name of a variable, it looks in those three places for a definition of that variable. If Python doesn't find the variable in any of those places, it throws a &lt;code&gt;NameError&lt;/code&gt;. &lt;code&gt;lambda&lt;/code&gt; must temporarily add variables (here, &lt;code&gt;x&lt;/code&gt;) to our namespace and then throw them away.&lt;/p&gt;
&lt;p&gt;We removed the arm of the statue and a &lt;code&gt;NameError&lt;/code&gt; was revealed. Cool. Now let's try naively reconstructing the statue.&lt;/p&gt;
&lt;p&gt;What if we tried using the &lt;code&gt;**&lt;/code&gt; operator? Can we pass something like &lt;code&gt;**2&lt;/code&gt; as the function for &lt;code&gt;map&lt;/code&gt;? Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;SyntaxError&lt;/code&gt; makes me think that &lt;code&gt;**&lt;/code&gt; is part of a statement, defined in Python's Grammar file, and the way that we typed our code is in violation of the the definition of that statement.&lt;/p&gt;
&lt;p&gt;I am going to cheat a bit here. I am going to present something I found on the internet that helps us understand this &lt;code&gt;SyntaxError&lt;/code&gt; without showing how I knew what to google to get the answer. At some point I'll write about, given a &lt;code&gt;SyntaxError&lt;/code&gt;, how we can find the relevant rules defined in Python's Grammar, understand which rules we're violating, and adjust our code to obey. But not today.&lt;/p&gt;
&lt;p&gt;So the short story is I did some research to figure out how &lt;code&gt;**&lt;/code&gt; Python operators are &lt;a href="https://docs.python.org/2/reference/expressions.html#the-power-operator"&gt;defined&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;**&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;u_expr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important thing to note is that any time Python sees &lt;code&gt;**&lt;/code&gt; in this context, it expects a thing called a &lt;a href="https://docs.python.org/2/reference/expressions.html#primaries"&gt;&lt;code&gt;primary&lt;/code&gt;&lt;/a&gt; to come before it and a thing called a &lt;a href="https://docs.python.org/2/reference/expressions.html#unary-arithmetic-and-bitwise-operations"&gt;&lt;code&gt;u_expr&lt;/code&gt;&lt;/a&gt; to come after it. We can tell we violated this rule without even understanding what a &lt;code&gt;primary&lt;/code&gt; or a &lt;code&gt;u_expr&lt;/code&gt; is. We tried typing &lt;code&gt;**2&lt;/code&gt;, which doesn't include anything that could be interpreted as a &lt;code&gt;primary&lt;/code&gt; before the &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay. So we can't reconstruct Mary's function using &lt;code&gt;**&lt;/code&gt; instead of &lt;code&gt;lambda&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What else could we try instead of a lambda function? Is there a function already defined in Python that does the same thing as the operator &lt;code&gt;**&lt;/code&gt; but in function syntax?&lt;/p&gt;
&lt;p&gt;Let's &lt;a href="https://www.google.com/search?q=python+power+operator+function&amp;amp;oq=python+power+operator+function&amp;amp;aqs=chrome..69i57.426j0j1&amp;amp;sourceid=chrome&amp;amp;espv=210&amp;amp;es_sm=91&amp;amp;ie=UTF-8"&gt;google&lt;/a&gt; "python power operator function." We quickly discover that there's a builtin &lt;code&gt;pow&lt;/code&gt; function that takes two parameters, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and returns &lt;code&gt;x**y&lt;/code&gt;. Cool! So &lt;code&gt;pow(x,2)&lt;/code&gt; should return the same thing as &lt;code&gt;x**2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Does the &lt;code&gt;pow&lt;/code&gt; function work in our &lt;code&gt;map&lt;/code&gt; function? Let's try!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;TypeError&lt;/span&gt;: &lt;span class="n"&gt;pow expected at least 2 arguments, got 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, right. Derp. We need to pass &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;pow&lt;/code&gt;, in addition to each element in our list. In the &lt;a href="https://docs.python.org/2.7/library/functions.html#map"&gt;documentation&lt;/a&gt; for &lt;code&gt;map&lt;/code&gt;, we see that if the function takes two arguments, we need to pass it two iterables. So we could do something kind of dumb like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="go"&gt;[0, 1, 4, 9, 16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works, but it's pretty ugly compared to the original:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It seems silly to use a function, &lt;code&gt;pow&lt;/code&gt;, that takes two arguments, when one of the arguments we pass it is always the same.&lt;/p&gt;
&lt;p&gt;Ohhh.&lt;/p&gt;
&lt;p&gt;Maybe that's why Mary used &lt;code&gt;lambda&lt;/code&gt;! To create a function that works kind of like &lt;code&gt;pow&lt;/code&gt; but just takes one argument!&lt;/p&gt;
&lt;p&gt;So we broke the statue, attempted to reconstruct it, and then wound up with something way uglier than the original. And thus, through breaking Mary's code, her design decisions were revealed! And now we have a better understanding of why the original process was used!&lt;/p&gt;
&lt;p&gt;Breaking things is fucking rad.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post is not intended to show the most pythonic way of squaring a list of integers. Instead, it is intended to show that we can discover how and why a code block works by exploring what happens when we remove chunks of it.&lt;/p&gt;</summary><category term="learning"></category><category term="hacker school"></category><category term="python"></category><category term="functional programming"></category><category term="map"></category><category term="lambda"></category><category term="python internals"></category><category term="grammar"></category></entry><entry><title>What's the deal with __builtins__ vs __builtin__</title><link href="http://amygdalama.github.io/whats-the-deal-with-builtins-vs-builtin.html" rel="alternate"></link><updated>2014-03-23T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-23:whats-the-deal-with-builtins-vs-builtin.html</id><summary type="html">&lt;p&gt;Seriously, what's the difference? When you first fire up the Python interpreter, &lt;code&gt;__builtins__&lt;/code&gt; is in your namespace for free:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;__builtins__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__package__&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;module &amp;#39;__builtin__&amp;#39; (built-in)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it appears to be the &lt;code&gt;__builtin__&lt;/code&gt; module (singular)! If you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrm. So they are both names that point to the same object, the module &lt;code&gt;__builtin__&lt;/code&gt;. Weird. Why does Python do this? Do they always behave the same?&lt;/p&gt;
&lt;p&gt;I read on &lt;a href="http://stackoverflow.com/questions/11181519/python-whats-the-difference-between-builtin-and-builtins"&gt;StackOverflow&lt;/a&gt; that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, when in the &lt;code&gt;__main__&lt;/code&gt; module, &lt;code&gt;__builtins__&lt;/code&gt; is the built-in module &lt;code&gt;__builtin__&lt;/code&gt; (note: no 's'); when in any other module, &lt;code&gt;__builtins__&lt;/code&gt; is an alias for the dictionary of the &lt;code&gt;__builtin__&lt;/code&gt; module itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What. What does that mean.&lt;/p&gt;
&lt;p&gt;This talk of the "&lt;code&gt;__main__&lt;/code&gt; module" and "any other module" reminds me of a sequence of words that I've known for quite a while, but haven't completely grokked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can access the name of the current module with the builtin variable &lt;code&gt;__name__&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You're probably familiar with the related canonical statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what does "current module" mean? What does the &lt;code&gt;__name__&lt;/code&gt; variable look like when it does not equal &lt;code&gt;__main__&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I happen to know, because I've obsessively read about the &lt;code&gt;import&lt;/code&gt; statement, another sequence of words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any code executed as a result of an &lt;code&gt;import&lt;/code&gt; isn't executed in the &lt;code&gt;__main__&lt;/code&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's use these bits of knowledge to observe the behavior of &lt;code&gt;__builtins__&lt;/code&gt; both inside and outside of the &lt;code&gt;__main__&lt;/code&gt; module. We can also check out the &lt;code&gt;__name__&lt;/code&gt; variable while we're at it.&lt;/p&gt;
&lt;p&gt;First, let's make a script, &lt;code&gt;a.py&lt;/code&gt;, which will allow us to observe the behavior of &lt;code&gt;__builtin__&lt;/code&gt;, &lt;code&gt;__builtins__&lt;/code&gt;, and &lt;code&gt;__name__&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;In a&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__name__ is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtin__ is __builtins__:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtin__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtins__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see what happens when we execute &lt;code&gt;a.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python a.py
&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay. So we're in the &lt;code&gt;__main__&lt;/code&gt; module, and in here &lt;code&gt;__builtin__&lt;/code&gt; is pointing to the same module object as &lt;code&gt;__builtins__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What happens if we &lt;code&gt;import a&lt;/code&gt; in another script? The code in &lt;code&gt;a&lt;/code&gt; will execute, but it won't be executed within the &lt;code&gt;__main__&lt;/code&gt; module. Instead, it'll be executed within the &lt;code&gt;a&lt;/code&gt; module. Let's write another script, &lt;code&gt;b.py&lt;/code&gt;, to find out what happens to &lt;code&gt;__builtins__&lt;/code&gt; outside of &lt;code&gt;__main__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;In b, before importing a&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# the output from this should be the same as when we ran&lt;/span&gt;
&lt;span class="c"&gt;# $ python a.py&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__name__ is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtin__ is __builtins__:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtin__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtins__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt;
&lt;span class="c"&gt;# code from a will execute here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see what happens when we run &lt;code&gt;b.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python b.py
&lt;span class="go"&gt;In b, before importing a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;


&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: a&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: False&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha. So when we're outside the context of the &lt;code&gt;__main__&lt;/code&gt; module, &lt;code&gt;__name__&lt;/code&gt; is just equal to the name of the module where code is currently being executed. That seems logical. And outside of &lt;code&gt;__main__&lt;/code&gt;, &lt;code&gt;__builtins__&lt;/code&gt; is a dict, rather than a module.&lt;/p&gt;
&lt;p&gt;We were told earlier that, outside the context of &lt;code&gt;__main__&lt;/code&gt;, &lt;em&gt;"&lt;code&gt;__builtins__&lt;/code&gt; is an alias for the dictionary of the &lt;code&gt;__builtin__&lt;/code&gt; module"&lt;/em&gt;. I think that means that &lt;code&gt;__builtins__ is __builtin__.__dict__&lt;/code&gt;. Let's see if my hypothesis is true, by adding another line to the bottom of our &lt;code&gt;a.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtins__ is __builtin__.__dict__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;b.py&lt;/code&gt; again, we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python b.py
&lt;span class="go"&gt;In b, before importing a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;


&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: a&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: False&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;__builtins__ is __builtin__.__dict__ True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes! My hypothesis was correct. Okay. So now I get why using &lt;code&gt;__builtin__&lt;/code&gt; is better than &lt;code&gt;__builtins__&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The type, and thus behavior, of &lt;code&gt;__builtins__&lt;/code&gt; changes based on the context of where it's being executed, while the type and behavior of &lt;code&gt;__builtin__&lt;/code&gt; is constant. Rad.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks, stranger who &lt;a href="https://github.com/amygdalama/nagini/issues/1"&gt;suggested&lt;/a&gt; I look into this, for the learning opportunity. And thanks, always, to Allison Kaptur, for exploring this topic with me.&lt;/p&gt;
&lt;p&gt;The code for this blog post is on &lt;a href="https://github.com/amygdalama/builtins"&gt;GitHub&lt;/a&gt;, of course.&lt;/p&gt;</summary><category term="python"></category><category term="builtins"></category><category term="hacker school"></category><category term="python internals"></category></entry><entry><title>Replacing import with accio: A Dive into Bootstrapping and Python's Grammar</title><link href="http://amygdalama.github.io/import-accio-bootstrapping-python-grammar.html" rel="alternate"></link><updated>2014-03-14T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-14:import-accio-bootstrapping-python-grammar.html</id><summary type="html">&lt;p&gt;At &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;, I've been building an alternate universe Python by overwriting builtin functions and statements with Harry Potter spells. This is a thing you can do at Hacker School!&lt;/p&gt;
&lt;p&gt;Although this project started as a joke, I've quickly descended so deeply into Python internals that I've, with the guidance of the fabulous Hacker School facilitator &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, made edits to the CPython source code, and compiled a Python to compile a Python. All to replace the &lt;code&gt;import&lt;/code&gt; statement with &lt;code&gt;accio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But before we get into compiling the Harry Potter Python I lovingly call Nagini, let's first talk about some Python internals basics, with spells as examples, of course.&lt;/p&gt;
&lt;h1 id="overwriting-builtin-functions"&gt;Overwriting Builtin Functions&lt;/h1&gt;
&lt;p&gt;Python builtin functions are stored in a module called &lt;code&gt;__builtins__&lt;/code&gt; that's automatically imported on startup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;ArithmeticError&amp;#39;, &amp;#39;AssertionError&amp;#39;, &amp;#39;AttributeError&amp;#39;, &amp;#39;BaseException&amp;#39;, &amp;#39;BufferError&amp;#39;, &amp;#39;BytesWarning&amp;#39;, &amp;#39;DeprecationWarning&amp;#39;, &amp;#39;EOFError&amp;#39;, &amp;#39;Ellipsis&amp;#39;, &amp;#39;EnvironmentError&amp;#39;, &amp;#39;Exception&amp;#39;, &amp;#39;False&amp;#39;, &amp;#39;FloatingPointError&amp;#39;, &amp;#39;FutureWarning&amp;#39;, &amp;#39;GeneratorExit&amp;#39;, &amp;#39;IOError&amp;#39;, &amp;#39;ImportError&amp;#39;, &amp;#39;ImportWarning&amp;#39;, &amp;#39;IndentationError&amp;#39;, &amp;#39;IndexError&amp;#39;, &amp;#39;KeyError&amp;#39;, &amp;#39;KeyboardInterrupt&amp;#39;, &amp;#39;LookupError&amp;#39;, &amp;#39;MemoryError&amp;#39;, &amp;#39;NameError&amp;#39;, &amp;#39;None&amp;#39;, &amp;#39;NotImplemented&amp;#39;, &amp;#39;NotImplementedError&amp;#39;, &amp;#39;OSError&amp;#39;, &amp;#39;OverflowError&amp;#39;, &amp;#39;PendingDeprecationWarning&amp;#39;, &amp;#39;ReferenceError&amp;#39;, &amp;#39;RuntimeError&amp;#39;, &amp;#39;RuntimeWarning&amp;#39;, &amp;#39;StandardError&amp;#39;, &amp;#39;StopIteration&amp;#39;, &amp;#39;SyntaxError&amp;#39;, &amp;#39;SyntaxWarning&amp;#39;, &amp;#39;SystemError&amp;#39;, &amp;#39;SystemExit&amp;#39;, &amp;#39;TabError&amp;#39;, &amp;#39;True&amp;#39;, &amp;#39;TypeError&amp;#39;, &amp;#39;UnboundLocalError&amp;#39;, &amp;#39;UnicodeDecodeError&amp;#39;, &amp;#39;UnicodeEncodeError&amp;#39;, &amp;#39;UnicodeError&amp;#39;, &amp;#39;UnicodeTranslateError&amp;#39;, &amp;#39;UnicodeWarning&amp;#39;, &amp;#39;UserWarning&amp;#39;, &amp;#39;ValueError&amp;#39;, &amp;#39;Warning&amp;#39;, &amp;#39;ZeroDivisionError&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;__debug__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__import__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;abs&amp;#39;, &amp;#39;all&amp;#39;, &amp;#39;any&amp;#39;, &amp;#39;apply&amp;#39;, &amp;#39;basestring&amp;#39;, &amp;#39;bin&amp;#39;, &amp;#39;bool&amp;#39;, &amp;#39;buffer&amp;#39;, &amp;#39;bytearray&amp;#39;, &amp;#39;bytes&amp;#39;, &amp;#39;callable&amp;#39;, &amp;#39;chr&amp;#39;, &amp;#39;classmethod&amp;#39;, &amp;#39;cmp&amp;#39;, &amp;#39;coerce&amp;#39;, &amp;#39;compile&amp;#39;, &amp;#39;complex&amp;#39;, &amp;#39;copyright&amp;#39;, &amp;#39;credits&amp;#39;, &amp;#39;delattr&amp;#39;, &amp;#39;dict&amp;#39;, &amp;#39;dir&amp;#39;, &amp;#39;divmod&amp;#39;, &amp;#39;enumerate&amp;#39;, &amp;#39;eval&amp;#39;, &amp;#39;execfile&amp;#39;, &amp;#39;exit&amp;#39;, &amp;#39;file&amp;#39;, &amp;#39;filter&amp;#39;, &amp;#39;float&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;frozenset&amp;#39;, &amp;#39;getattr&amp;#39;, &amp;#39;globals&amp;#39;, &amp;#39;hasattr&amp;#39;, &amp;#39;hash&amp;#39;, &amp;#39;help&amp;#39;, &amp;#39;hex&amp;#39;, &amp;#39;id&amp;#39;, &amp;#39;input&amp;#39;, &amp;#39;int&amp;#39;, &amp;#39;intern&amp;#39;, &amp;#39;isinstance&amp;#39;, &amp;#39;issubclass&amp;#39;, &amp;#39;iter&amp;#39;, &amp;#39;len&amp;#39;, &amp;#39;license&amp;#39;, &amp;#39;list&amp;#39;, &amp;#39;locals&amp;#39;, &amp;#39;long&amp;#39;, &amp;#39;map&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;memoryview&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;next&amp;#39;, &amp;#39;object&amp;#39;, &amp;#39;oct&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;ord&amp;#39;, &amp;#39;pow&amp;#39;, &amp;#39;print&amp;#39;, &amp;#39;property&amp;#39;, &amp;#39;quit&amp;#39;, &amp;#39;range&amp;#39;, &amp;#39;raw_input&amp;#39;, &amp;#39;reduce&amp;#39;, &amp;#39;reload&amp;#39;, &amp;#39;repr&amp;#39;, &amp;#39;reversed&amp;#39;, &amp;#39;round&amp;#39;, &amp;#39;set&amp;#39;, &amp;#39;setattr&amp;#39;, &amp;#39;slice&amp;#39;, &amp;#39;sorted&amp;#39;, &amp;#39;staticmethod&amp;#39;, &amp;#39;str&amp;#39;, &amp;#39;sum&amp;#39;, &amp;#39;super&amp;#39;, &amp;#39;tuple&amp;#39;, &amp;#39;type&amp;#39;, &amp;#39;unichr&amp;#39;, &amp;#39;unicode&amp;#39;, &amp;#39;vars&amp;#39;, &amp;#39;xrange&amp;#39;, &amp;#39;zip&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Overwriting Python builtins is surprisingly easy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;wingardium_leviosa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;NameError&lt;/span&gt;: &lt;span class="n"&gt;name &amp;#39;float&amp;#39; is not defined&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;wingardium_leviosa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;3.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, overwriting &lt;code&gt;import&lt;/code&gt; is not so easy. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt;
                 &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python is expecting the name of a module after &lt;code&gt;import&lt;/code&gt;, and thus it throws a &lt;code&gt;SyntaxError&lt;/code&gt;. This is an effect of &lt;code&gt;import x&lt;/code&gt; being a &lt;em&gt;statement&lt;/em&gt;, rather than an &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hm. I remember seeing the function &lt;code&gt;__import__&lt;/code&gt; listed when we ran &lt;code&gt;dir(__builtins__)&lt;/code&gt;. Maybe we can overwrite that instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__import__&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
            &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;

&lt;span class="go"&gt;# :(&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if we tried calling &lt;code&gt;accio&lt;/code&gt; like a function?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;NameError&lt;/span&gt;: &lt;span class="n"&gt;name &amp;#39;sys&amp;#39; is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe we need to pass 'sys' as a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;# Ooh!&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha. So the statement &lt;code&gt;import x&lt;/code&gt; probably does something like:
    1. call the &lt;code&gt;__import__&lt;/code&gt; function on &lt;code&gt;x&lt;/code&gt;: &lt;code&gt;__builtins__.__import__('x')&lt;/code&gt;
    2. assign the name &lt;code&gt;x&lt;/code&gt; to the module returned by &lt;code&gt;__import__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;import sys&lt;/code&gt; is like shorthand for the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Here I'm only describing simple &lt;code&gt;import&lt;/code&gt; statements, but more complex statements like &lt;code&gt;from x import y.w, y.z&lt;/code&gt; work similarly.)&lt;/p&gt;
&lt;p&gt;So we have a way to add &lt;code&gt;accio&lt;/code&gt; as a function, but not as a statement. I'm unsatisfied.&lt;/p&gt;
&lt;p&gt;For fun, can we delete import?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__import__&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;ImportError&lt;/span&gt;: &lt;span class="n"&gt;__import__ not found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kind of! Although I want &lt;code&gt;import os&lt;/code&gt; to be a &lt;code&gt;SyntaxError&lt;/code&gt; rather than an &lt;code&gt;ImportError&lt;/code&gt; because clearly &lt;code&gt;import&lt;/code&gt; is the wrong thing to type and the user should know to type &lt;code&gt;accio&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;So, to completely overwrite &lt;code&gt;import&lt;/code&gt; with &lt;code&gt;accio&lt;/code&gt;, we'll need to learn where Python defines statements.&lt;/p&gt;
&lt;h1 id="grammar"&gt;Grammar&lt;/h1&gt;
&lt;p&gt;Eli Bendersky wrote a great &lt;a href="http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/"&gt;blog post&lt;/a&gt; about adding an &lt;code&gt;until&lt;/code&gt; statement to Python. Since we want to &lt;em&gt;replace&lt;/em&gt; a statement, rather than add one, our method will be a bit different.&lt;/p&gt;
&lt;p&gt;Regardless, it looks like the place to start for changing Python's statements is in the &lt;code&gt;Grammar&lt;/code&gt; file in the Python &lt;a href="http://docs.python.org/devguide/setup.html"&gt;source code&lt;/a&gt;. &lt;strong&gt;Python source code!&lt;/strong&gt; Isn't this &lt;em&gt;fun?!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Python's source code is stored in a Mercurial repository, so first we'll have to install Mercurial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can clone CPython (like &lt;code&gt;git clone&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone http://hg.python.org/cpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take a whole minute. Grab a coffee.&lt;/p&gt;
&lt;p&gt;In the Python Mercurial repo, different versions of Python have different branches. By default we're on a Python3 branch. I'm still running Python2 on my machine, so let's checkout version 2.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;cpython
&lt;span class="nv"&gt;$ &lt;/span&gt;hg checkout 2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's &lt;a href="http://docs.python.org/devguide/setup.html"&gt;compile CPython&lt;/a&gt; and see if it works!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --with-pydebug
&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I get a warning message saying some modules were unable to be built, but I am unstoppable. We are unstoppable. Let's continue.&lt;/p&gt;
&lt;p&gt;It seems like the place to start is in the file &lt;code&gt;Grammar/Grammar&lt;/code&gt;, so let's start poking around there. &lt;a href="http://docs.python.org/2/reference/grammar.html"&gt;This&lt;/a&gt; is what it looks like. Searching for 'import' brings us to lines 52-60:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import_stmt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;import_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;import_from&lt;/span&gt;
&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dotted_as_names&lt;/span&gt;
&lt;span class="n"&gt;import_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dotted_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;import_as_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;as&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dotted_as_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dotted_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;as&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;import_as_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;import_as_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;import_as_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dotted_as_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dotted_as_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dotted_as_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;dotted_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! We can kind of understand what's going on here just from reading. It looks like an &lt;code&gt;import_stmt&lt;/code&gt; is either an &lt;code&gt;import_name&lt;/code&gt; or an &lt;code&gt;import_from&lt;/code&gt; which have the format &lt;code&gt;import x&lt;/code&gt; and &lt;code&gt;from x import y&lt;/code&gt;, respectively. What happens if we just change 'import' to 'accio' in lines 53 and 55? Let's try it. After making the change and saving the &lt;code&gt;Grammar&lt;/code&gt; file, type the following command to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ach. If only it was that easy. This throws an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;151&lt;/span&gt;, in &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_module_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;113&lt;/span&gt;, in &lt;span class="n"&gt;_get_module_details&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/pkgutil.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;283&lt;/span&gt;, in &lt;span class="n"&gt;get_code&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/sysconfig.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;4&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This error occurs while trying to execute a Python script! Compiling CPython requires running Python scripts! Interesting. Maybe at this point we remember that Python is &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(compilers)"&gt;bootstrapped&lt;/a&gt;. We look back at the &lt;a href="http://docs.python.org/devguide/setup.html"&gt;Python Developer's Guide&lt;/a&gt; and we find that &lt;em&gt;"Vast areas of CPython are written completely in Python: as of this writing, CPython contains slightly more Python code than C."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So then we wonder - when CPython is compiling, does it execute Python scripts with the Python that's currently being compiled? Or does it use another already-compiled muggle Python, like our environment Python? If it uses the Python that's currently being compiled, we'll need to change these .py scripts to say &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Otherwise, what do we do? Our muggle Python only understands &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;...&lt;/p&gt;
&lt;p&gt;Let's look into one of the .py scripts within &lt;code&gt;Lib&lt;/code&gt; to investigate. Here's the first line of the &lt;code&gt;Lib/keyword.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! This script is executed via our environment Python! Our environment Python only understands &lt;code&gt;import&lt;/code&gt;. So &lt;code&gt;keyword.py&lt;/code&gt; needs to have &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;. However, since we got a &lt;code&gt;SyntaxError&lt;/code&gt; on an &lt;code&gt;import&lt;/code&gt; statement, that must mean that at least sometimes during the process of compiling we're required to use &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Hrm... Any ideas?&lt;/p&gt;
&lt;h1 id="yo-dawg-i-heard-you-like-pythons"&gt;Yo Dawg, I Heard You Like Pythons&lt;/h1&gt;
&lt;p&gt;What if we did something crazy like compiled an intermediary Python that understands &lt;em&gt;both&lt;/em&gt; &lt;code&gt;accio&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;import&lt;/code&gt;, and used &lt;em&gt;that&lt;/em&gt; Python to compile &lt;em&gt;another&lt;/em&gt; Python that only understands &lt;code&gt;accio&lt;/code&gt;? (Full credit for this idea goes to &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So, for our intermediary Python we'll need to edit the &lt;code&gt;Grammar&lt;/code&gt; file like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dotted_as_names&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;accio&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dotted_as_names&lt;/span&gt;
&lt;span class="n"&gt;import_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dotted_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dotted_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="s"&gt;&amp;#39;accio&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus this Python should understand both &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;accio&lt;/code&gt;. Let's compile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eep! No errors! Just the warning about missing modules that we also received before we made any changes! Now we need to prepend our $PATH so that this Python will become our environment Python (but only for this terminal session). That way this intermediary Python will be used to compile our final Python. Let's make a symlink to the &lt;code&gt;python.exe&lt;/code&gt; that was created when we ran &lt;code&gt;make&lt;/code&gt;, and then add the path to that symlink to our $PATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll need to duplicate this entire &lt;code&gt;cpython&lt;/code&gt; directory and make our final Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../
&lt;span class="nv"&gt;$ &lt;/span&gt;cp -r cpython nagini-python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;nagini-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to change the &lt;code&gt;Grammar&lt;/code&gt; file for this Python to only allow &lt;code&gt;accio&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;accio&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dotted_as_names&lt;/span&gt;
&lt;span class="n"&gt;import_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dotted_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="s"&gt;&amp;#39;accio&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;import_as_names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we want to replace every instance of &lt;code&gt;import&lt;/code&gt; in every .py file to &lt;code&gt;accio&lt;/code&gt;. We'll use a blackbox bash command to accomplish that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="sb"&gt;`&lt;/span&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;sed -i &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/[[:&amp;lt;:]]import[[:&amp;gt;:]]/accio/g&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we just need to compile this new Python!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's make a symlink to this Python...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And fire it up...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;accio&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;copy_reg&amp;#39;, &amp;#39;sre_compile&amp;#39;, &amp;#39;_sre&amp;#39;, &amp;#39;encodings&amp;#39;, &amp;#39;site&amp;#39;, &amp;#39;__builtin__&amp;#39;, &amp;#39;sysconfig&amp;#39;, &amp;#39;__main__&amp;#39;, &amp;#39;encodings.encodings&amp;#39;, &amp;#39;abc&amp;#39;, &amp;#39;posixpath&amp;#39;, &amp;#39;_weakrefset&amp;#39;, &amp;#39;errno&amp;#39;, &amp;#39;encodings.codecs&amp;#39;, &amp;#39;sre_constants&amp;#39;, &amp;#39;re&amp;#39;, &amp;#39;_abcoll&amp;#39;, &amp;#39;types&amp;#39;, &amp;#39;_codecs&amp;#39;, &amp;#39;encodings.__builtin__&amp;#39;, &amp;#39;_warnings&amp;#39;, &amp;#39;genericpath&amp;#39;, &amp;#39;stat&amp;#39;, &amp;#39;zipimport&amp;#39;, &amp;#39;_sysconfigdata&amp;#39;, &amp;#39;warnings&amp;#39;, &amp;#39;UserDict&amp;#39;, &amp;#39;encodings.ascii&amp;#39;, &amp;#39;sys&amp;#39;, &amp;#39;_osx_support&amp;#39;, &amp;#39;codecs&amp;#39;, &amp;#39;os.path&amp;#39;, &amp;#39;sitecustomize&amp;#39;, &amp;#39;signal&amp;#39;, &amp;#39;traceback&amp;#39;, &amp;#39;linecache&amp;#39;, &amp;#39;posix&amp;#39;, &amp;#39;encodings.aliases&amp;#39;, &amp;#39;exceptions&amp;#39;, &amp;#39;sre_parse&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;_weakref&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HOLY SHIT IT WORKS!&lt;/p&gt;
&lt;h1 id="fin"&gt;Fin&lt;/h1&gt;
&lt;p&gt;That's it. We just compiled two Pythons and fooled around with source code for the sake of a joke. Grab yourselves a beer, friends. Victory.&lt;/p&gt;
&lt;p&gt;My super messy and not-really-prepared-for-the-general-public GitHub &lt;a href="https://github.com/amygdalama/nagini"&gt;repo&lt;/a&gt; contains both versions of Python, for reference.&lt;/p&gt;</summary><category term="python"></category><category term="harry potter"></category><category term="bootstrapping"></category><category term="cpython"></category><category term="compilers"></category><category term="grammar"></category><category term="hacker school"></category><category term="python internals"></category></entry><entry><title>GitHub Pages Publication with Git Hooks</title><link href="http://amygdalama.github.io/github-pages-publication-git-hooks.html" rel="alternate"></link><updated>2014-03-08T00:00:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-08:github-pages-publication-git-hooks.html</id><summary type="html">&lt;p&gt;As I &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;wrote&lt;/a&gt; at length a couple weeks ago, this blog is hosted on &lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; and generated by &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt;. Generally the integration between the two is quite blissful, except for managing two separate repositories - &lt;a href="https://github.com/amygdalama/blog-source"&gt;blog-source&lt;/a&gt; for my blog's source content, configuration files, and theme, and &lt;a href="https://github.com/amygdalama/amygdalama.github.io"&gt;amygdalama.github.io&lt;/a&gt; for my Pelican-generated site.&lt;/p&gt;
&lt;p&gt;Lately I've been pushing to these two separate repositories manually, so my workflow looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog/      &lt;span class="c"&gt;# root directory for my blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver    &lt;span class="c"&gt;# automatically re-generates site and hosts site locally&lt;/span&gt;
&lt;span class="c"&gt;# change something in content or settings&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add --all
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;committing blog source&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master    &lt;span class="c"&gt;# pushes to my blog-source repo on GitHub&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output/    &lt;span class="c"&gt;# pelican-generated output folder&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -am &lt;span class="s2"&gt;&amp;quot;committing pelican-generated site content&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master    &lt;span class="c"&gt;# pushes to my amygdalama.github.io repo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But alas! I have figured out how to automatically push any changes committed in my root blog directory to my blog-source repo and then automatically add, commit, and push changes to my GitHub Pages repo. Now my workflow looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog/
&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;span class="c"&gt;# change something in content or settings&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add --all
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;committing blog source&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# everything else happens automatically! no more typing! yay!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key is to use &lt;a href="http://githooks.com/"&gt;Git Hooks&lt;/a&gt;. For a particular .git repo, you can add an executable file in &lt;code&gt;.git/hooks&lt;/code&gt; which will automatically execute before or after an event like &lt;code&gt;commit&lt;/code&gt;. The available types of hooks can be found &lt;a href="http://githooks.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this specific automation task, I used a post-commit hook. To do this, first create the file &lt;code&gt;.git/hooks/post-commit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog/
&lt;span class="nv"&gt;$ &lt;/span&gt;subl .git/hooks/post-commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add these lines to the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
git push origin master
&lt;span class="nb"&gt;cd &lt;/span&gt;output/
git add --all       &lt;span class="c"&gt;# sub-optimally will add all even if you didn&amp;#39;t add all to blog-source&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;automatic commit&amp;quot;&lt;/span&gt;    &lt;span class="c"&gt;# add whatever commit message you want&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, to make the file executable, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;r+w+x .git/hooks/post-commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it! Joyful automation!&lt;/p&gt;
&lt;h2 id="edit"&gt;Edit&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;2014-03-14&lt;/em&gt;: Hacker Schooler Matthew Avant has a &lt;a href="http://www.mavant.com/4.html"&gt;superior&lt;/a&gt; method using a pre-push hook (rather than a post-commit hook). I'm using his method now :)&lt;/p&gt;</summary><category term="github pages"></category><category term="pelican"></category><category term="git"></category><category term="blogging"></category><category term="hacker school"></category></entry><entry><title>How Should I Learn Programming?</title><link href="http://amygdalama.github.io/how-should-i-learn-programming.html" rel="alternate"></link><updated>2014-02-23T00:00:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-02-23:how-should-i-learn-programming.html</id><summary type="html">&lt;p&gt;I rarely hear the question &lt;em&gt;"How should I learn programming?"&lt;/em&gt; from individuals who are just beginning to write code. Instead I hear way more specific variants like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the best sites for learning programming?&lt;/li&gt;
&lt;li&gt;What's a good free online course...?&lt;/li&gt;
&lt;li&gt;What's a good textbook...?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are not very helpful questions to ask! Programming is not a subject in which you can just take a class or read a book and then "get it".&lt;/p&gt;
&lt;h2 id="tutorials-are-boring"&gt;Tutorials Are Boring&lt;/h2&gt;
&lt;p&gt;Tutorials/books/online classes are good for learning the basics of a language (syntax, control flow like for-loops and if-statements, data types like strings, arrays, etc). You want to use tutorials to give you enough of a framework to know what problems can be solved through programming and what to google when you run into an issue or a bug. &lt;/p&gt;
&lt;p&gt;At some point when you're taking an online class or going through a tutorial, you'll probably find that you no longer find it intellectually stimulating. This is okay! Tutorials are basically monkey-see, monkey-do. They &lt;em&gt;aren't&lt;/em&gt; intellectually stimulating (at least usually). When you get to this point, it is okay to quit the tutorial! Instead you should work on something that will satisfy your curiousity. You should write your own programs!&lt;/p&gt;
&lt;p&gt;I only really started learning &lt;em&gt;how to program&lt;/em&gt;, i.e. how to solve a problem by myself from start to finish by writing code, when I strayed from tutorials. Instead I would think of interesting problems to solve (or find &lt;a href="https://www.kaggle.com/competitions"&gt;some&lt;/a&gt; &lt;a href="https://projecteuler.net/"&gt;online&lt;/a&gt;) and then struggle through creating solutions. This approach is similar to actual coding in the wild! However, it can be very scary for new programmers! &lt;/p&gt;
&lt;h2 id="communities-are-inspiring"&gt;Communities Are Inspiring&lt;/h2&gt;
&lt;p&gt;Being surrounded by other humans who are learning programming and working on really interesting projects is an essential part of becoming a better programmer! I am &lt;em&gt;extremely&lt;/em&gt; fortunate to be a part of the epitome of this type of community at &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;. Being part of a group of programmers dedicated to learning and making cool things is quite inspiring, and you can probably find a group like this in your city, too! Many cities have &lt;a href="http://www.meetup.com/"&gt;Meetup&lt;/a&gt; groups related to programming. Join those! Go to hackathons! Meet friends that are better programmers than you! Get real humans to read your code and give you suggestions on how to improve! Pair program! These things, however, are terrifying! They are not easy! You will be exposing your weaknesses and lack of knowledge to other human beings! Oh dear! &lt;/p&gt;
&lt;h2 id="the-fear-you-will-let-it-pass-through-you"&gt;The Fear, You Will Let It Pass Through You&lt;/h2&gt;
&lt;p&gt;&lt;img src="http://amygdalama.github.io/images/paul_fear.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This fear is totally reasonable! And there are so many more reasons to be afraid! Most of us are quite accustomed to learning in a very sequential way, in which we start with Chapter 1, and then once we finish Chapter 12, everyone assumes we know what we're talking about. Learning to code is very different from this, and foreign things can be scary! Also, working on solving problems on our own can be scary because maybe you aren't smart enough! And working on solving problems with others is scary because you might not be good at communicating your ideas! Or you might not be as good at programming as they are! Or maybe you picked the wrong programming language! Or maybe you're afraid of not putting in enough effort to really get anywhere! Or of working so much you get burnt out! There are many things to be afraid of. In fact, on the first day of Hacker School we made a list of these things:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hacker Schoolers Are Nervous" src="http://amygdalama.github.io/images/hs-nervous.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;See! Other people are afraid! Fear is normal!&lt;/p&gt;
&lt;p&gt;It is essential to become aware of your fears. List them. Have someone read the list. You will probably giggle together. They are probably afraid, too.&lt;/p&gt;
&lt;h2 id="fuck-tutorials-write-a-program-send-it-to-another-human"&gt;Fuck tutorials. Write a program. Send it to another human.&lt;/h2&gt;
&lt;p&gt;You can send it to me! Here's my email: amyehanlon@gmail.com &amp;lt;3&lt;/p&gt;
&lt;p&gt;A huge shoutout to the fabulous &lt;a href="http://melchua.com/"&gt;Mel Chua&lt;/a&gt; for talking through this post with me and giving me a better vocabulary and framework for understanding learning.&lt;/p&gt;</summary><category term="learning"></category><category term="hacker school"></category></entry><entry><title>Migrating to GitHub Pages using Pelican</title><link href="http://amygdalama.github.io/migrating-to-github-pages-using-pelican.html" rel="alternate"></link><updated>2014-02-22T00:00:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-02-22:migrating-to-github-pages-using-pelican.html</id><summary type="html">&lt;p&gt;Over the past week I've been dog-paddling through the ocean of misery that is migrating a blog from one host (WordPress) to another (&lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;) and attempting to learn enough CSS and &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; to handle setting up my site using &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt;. I have no experience with CSS! And my HTML experience is limited to injecting angst into my MySpace profile! And I became aware of Jinja and Pelican's existence about a week ago! So obviously I've drowned myself in 1.5 bottles of my neighborhood liquor store's 2-bottles-of-wine-for-$10 special.&lt;/p&gt;
&lt;p&gt;The great part about this whole process is that with Pelican, I can write my blog posts and pages in &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; (about which I also knew little until last week, but it's &lt;em&gt;wonderfully easy to learn&lt;/em&gt;.) I am so tired of wrangling with WordPress's built-in editor trying to get my code blocks and in-line code to format correctly. Markdown is a blissful alternative.&lt;/p&gt;
&lt;p&gt;There's a plethora of material online on Pelican and GitHub pages, but it is fairly disconnected and presumes a certain level of front-end development experience, of which I have none. Hopefully this post can help others make this transition with less misery.&lt;/p&gt;
&lt;h2 id="github-pages-setup"&gt;GitHub Pages Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create a GitHub repo following the &lt;a href="http://pages.github.com/"&gt;GitHub Pages instructions&lt;/a&gt; (the first step only!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;A note on GitHub Pages:&lt;/em&gt; I believe your HTML files (particularly your index.html file) must be in the &lt;em&gt;main directory&lt;/em&gt; of your git repo for this to work. This will be important later. More detail is given in the &lt;strong&gt;Posting to GitHub&lt;/strong&gt; section.&lt;/p&gt;
&lt;h2 id="pelican-setup"&gt;Pelican Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install necessary &lt;a href="http://docs.getpelican.com/en/3.1.1/getting_started.html#installing-pelican"&gt;packages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run Pelican &lt;a href="http://docs.getpelican.com/en/3.1.1/getting_started.html#kickstart-a-blog"&gt;quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will ask you lots of questions that probably seem foreign. These questions will set up some configuration files that you can later edit with your preferred &lt;a href="http://docs.getpelican.com/en/3.1.1/settings.html"&gt;settings&lt;/a&gt;. As an example, here's how I answered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican-quickstart
&lt;span class="go"&gt;Where do you want to create your new web site? [.]&lt;/span&gt;
&lt;span class="go"&gt;What will be the title of this web site?&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Amy Hanlon
&lt;span class="go"&gt;Who will be the author of this web site?&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Amy Hanlon
&lt;span class="go"&gt;What will be the default language of this web site? [en]&lt;/span&gt;
&lt;span class="go"&gt;Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; y
&lt;span class="go"&gt;What is your URL prefix? (see above example; no trailing slash)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; http://amygdalama.github.io
&lt;span class="go"&gt;Do you want to enable article pagination? (Y/n)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; y
&lt;span class="go"&gt;How many articles per page do you want? [10]&lt;/span&gt;
&lt;span class="go"&gt;Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; y
&lt;span class="go"&gt;Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; y
&lt;span class="go"&gt;Do you want to upload your website using FTP? (y/N)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; n
&lt;span class="go"&gt;Do you want to upload your website using SSH? (y/N)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; n
&lt;span class="go"&gt;Do you want to upload your website using Dropbox? (y/N)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; n
&lt;span class="go"&gt;Do you want to upload your website using S3? (y/N)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; n
&lt;span class="go"&gt;Do you want to upload your website using Rackspace Cloud Files? (y/N)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if you type the &lt;code&gt;tree&lt;/code&gt; command within your blog's main directory, you should see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── Makefile
├── content
├── develop_server.sh
├── fabfile.py
├── output
├── pelicanconf.py
└── publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you don't have &lt;code&gt;tree&lt;/code&gt;, you should! It's neat. &lt;code&gt;brew install tree&lt;/code&gt;. If you're on OSX and don't have &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;, you should! It's neat.&lt;/p&gt;
&lt;p&gt;I'll briefly explain each of these files/directories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; tells the command &lt;code&gt;make&lt;/code&gt; what to do. This file defines commands like &lt;code&gt;make devserver&lt;/code&gt;. More information on &lt;code&gt;make&lt;/code&gt; can be found &lt;a href="http://www.gnu.org/software/make/manual/make.html"&gt;here&lt;/a&gt;. I'll cover more on how to use this command for developing your site in the &lt;strong&gt;Generating Your Site&lt;/strong&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;content&lt;/code&gt; is the directory that should house all of your Markdown files. Pelican assumes that your articles/blog posts will be inside this directory. Additionally, there are some special directories you should create within &lt;code&gt;content&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir content/pages
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir content/images
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican by default is configured to know that your pages (i.e. static pages like About Me, Contact, etc) are found within this &lt;code&gt;pages&lt;/code&gt; directory and that images are found within the &lt;code&gt;images&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;develop_server.sh&lt;/code&gt; is a bash script that I believe handles serving your site locally during development (i.e. it serves your site to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fabfile.py&lt;/code&gt; is a configuration file for &lt;a href="http://docs.fabfile.org/en/1.8/"&gt;Fabric&lt;/a&gt; which allows you to generate your site using the &lt;code&gt;fab&lt;/code&gt; command. You'll need to &lt;code&gt;pip install fabric&lt;/code&gt; if you want to use it. Alternatively you can just use &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;output&lt;/code&gt; is, by default, where Pelican will store your HTML files when you run &lt;code&gt;pelican content&lt;/code&gt;. This can cause issues which I describe in the section &lt;strong&gt;Posting to GitHub&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; houses your Pelican configuration &lt;a href="http://docs.getpelican.com/en/3.3.0/settings.html"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt; is like &lt;code&gt;pelicanconf.py&lt;/code&gt; in that it houses Pelican configuration settings, but is not intended to be used for local development. The reasoning behind having two separate files is described in &lt;a href="http://stackoverflow.com/a/20845195"&gt;this Stack Overflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exporting-existing-content"&gt;Exporting Existing Content&lt;/h2&gt;
&lt;p&gt;This section assumes you have existing content on a WordPress blog. Pelican also has an importer for Dotclear and RSS/Atom feeds. You can skip this section if you don't have existing content living elsewhere that you want to port to your site on GitHub Pages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://en.blog.wordpress.com/2006/06/12/xml-import-export/"&gt;Export WordPress content to XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.1.1/importer.html"&gt;Imperfectly convert the XML to Markdown using Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manually export your images from your WordPress Media Library (I know. This sucks.) Move these images to &lt;code&gt;content/images&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Manually edit the Markdown output (your code blocks, links, embedded images will likely need editing).&lt;/li&gt;
&lt;li&gt;Move your Markdown files to the &lt;code&gt;content&lt;/code&gt; directory within your website's main directory. Content intended to be static pages (i.e. About Me, Contact, etc) should go in the &lt;code&gt;content/pages&lt;/code&gt; directory. Articles/blog posts should go in the &lt;code&gt;content&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pelican-themes"&gt;Pelican Themes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone the available &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes&lt;/a&gt; into your blog's main directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/getpelican/pelican-themes
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose a theme you'd like to use. Pelican by default comes with the notmyidea and simple themes. Most other themes have a sample image in the pelican-themes repo to help you decide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After you've chosen a theme, set the THEME variable in your &lt;code&gt;pelicanconf.py&lt;/code&gt; file to the absolute or relative path to the theme. For example, I'm using the subtle theme and added this line to my &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pelican-themes/subtle&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method is better than using &lt;code&gt;pelican-themes&lt;/code&gt; as described &lt;a href="http://docs.getpelican.com/en/3.3.0/pelican-themes.html"&gt;here&lt;/a&gt;, because it ensures that the Pelican HTML output will reflect any changes you make to the theme (without having to re-install the theme by running the &lt;code&gt;pelican-themes&lt;/code&gt; command).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="customization"&gt;Customization&lt;/h2&gt;
&lt;p&gt;All elements of your theme are customizable! You can change attributes of text like font, size, color, and more in the &lt;code&gt;main.css&lt;/code&gt; file found in your theme's directory. For example, I've made many edits to the file &lt;code&gt;pelican-themes/subtle/static/css/main.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, you can change layouts of your pages (like what shows up in your site nav menu) by exploring the HTML files in the &lt;code&gt;templates&lt;/code&gt; folder within your theme. There will usually be a &lt;code&gt;base.html&lt;/code&gt; file (or something similar) that provides the foundation for things like your header and site nav menu that will apply to every page.&lt;/p&gt;
&lt;p&gt;There should also be HTML files that serve as templates for specific types of pages. For example, &lt;code&gt;article.html&lt;/code&gt; defines the basic structure for your articles/blog posts. If you want to change the metadata that displays above article content, you should look there.&lt;/p&gt;
&lt;p&gt;If you see something on your website that you want to change, and you're not sure where to look in your theme's CSS/HTML files, right click on the element in the browser and go to "Inspect Element". This will show you where in the HTML the element is (on the left) and what parts of the CSS file define its style (on the right). You can adjust things here in the browser to test out different fonts, colors, etc, but changes you make to the code in your browser will not be reflected in your source files.&lt;/p&gt;
&lt;h2 id="generating-your-site"&gt;Generating Your Site&lt;/h2&gt;
&lt;p&gt;Once you have markdown files in your &lt;code&gt;content&lt;/code&gt; folder, navigate to your blog's main directory and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make devserver&lt;/code&gt; does a number of things: first it runs the &lt;code&gt;pelican&lt;/code&gt; command on your &lt;code&gt;content&lt;/code&gt; folder to generate HTML for your site using the theme you specify in your &lt;code&gt;pelicanconf.py&lt;/code&gt; file, and serves your site locally at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;. &lt;code&gt;make devserver&lt;/code&gt; will also automatically regenerate your site (i.e. run &lt;code&gt;pelican&lt;/code&gt; on &lt;code&gt;content&lt;/code&gt; every time you save a change to a content, configuration, or theme file! Just refresh the page in your browser, and you should immediately see the changes. If this doesn't work, it's probably due to the settings you have in your configuration files (&lt;code&gt;pelicanconf.py&lt;/code&gt;, &lt;code&gt;Makefile&lt;/code&gt;, and/or &lt;code&gt;develop_server.sh&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id="posting-to-github"&gt;Posting to GitHub&lt;/h2&gt;
&lt;p&gt;Recall that you need a repository on GitHub named &lt;em&gt;username.github.io&lt;/em&gt; (this will be the remote repository for your blog), and that your HTML files need to be in this repository's main directory (not within a subdirectory).&lt;/p&gt;
&lt;p&gt;It's intuitive to initialize a local repository for your blog within your blog's main directory, because in addition to posting the HTML, you'd also like to backup your content Markdown files, configuration files, and customized theme. This is a reasonable desire!&lt;/p&gt;
&lt;p&gt;However, if you do this, GitHub won't generate your site! It isn't smart enough to know that the HTML files it needs to serve are actually contained within the &lt;code&gt;output&lt;/code&gt; folder (recall that Pelican by default saves the HTML it generates in this folder).&lt;/p&gt;
&lt;p&gt;The best solution I've come up with so far (and please email me if you know of a better solution!) is to create two separate repositories - one inside the &lt;code&gt;output&lt;/code&gt; directory where Pelican generates your HTML (this repo should have &lt;em&gt;username.github.io&lt;/em&gt; on GitHub as a remote), and another in your blog's main directory with your source Markdown files (in &lt;code&gt;content&lt;/code&gt;), theme, and configuration files (this repo should have a different remote on GitHub).&lt;/p&gt;
&lt;p&gt;In the terminal, move to the &lt;code&gt;output&lt;/code&gt; directory, and initialize a git repo. Add a remote pointing to the repo you created on GitHub (called &lt;em&gt;username.github.io&lt;/em&gt;), add all the files you want to commit, commit, and push changes to the remote repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output
&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add origin https://github.com/username/username.github.io.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git add --all
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use this method, you'll want to change the following setting to &lt;code&gt;False&lt;/code&gt; in your &lt;code&gt;publishconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise if you use the &lt;code&gt;publishconf.py&lt;/code&gt; file as your settings file when running the &lt;code&gt;pelican&lt;/code&gt; command, you'll delete your git repo!&lt;/p&gt;
&lt;p&gt;Similarly, don't use the &lt;code&gt;make clean&lt;/code&gt; command! If you poke around the &lt;code&gt;Makefile&lt;/code&gt;, you'll see that &lt;code&gt;make clean&lt;/code&gt; runs &lt;code&gt;rm -rf output&lt;/code&gt; which will delete all files (including your git repo) in your output folder.&lt;/p&gt;
&lt;p&gt;If you accidentally delete the repo in your output folder, it's not a &lt;em&gt;huge&lt;/em&gt; deal (I've done it like 5 times playing with different commands and settings). Just clone your remote &lt;em&gt;username.github.io&lt;/em&gt; repo into a new, empty &lt;code&gt;output&lt;/code&gt; folder, re-generate your site with any changes you've made since your last push to the remote, and then commit and push the changes to the remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/username/username.github.io.git output
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican content
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output
&lt;span class="nv"&gt;$ &lt;/span&gt;git add --all
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll also need to set up another repository for your source content, configuration files, and theme, which is annoying. I added a .gitignore to this repo to ignore the files in the output folder, but that isn't necessary.&lt;/p&gt;
&lt;p&gt;Within about 10 minutes of pushing your changes, your site should be up and running! (Later changes should be reflected on your site almost instantaneously.)&lt;/p&gt;
&lt;h2 id="custom-domain-setup"&gt;Custom Domain Setup&lt;/h2&gt;
&lt;p&gt;If you have your own domain name that you'd like to use instead of &lt;em&gt;username.github.io&lt;/em&gt;, you'll need to follow &lt;a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages"&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fin"&gt;Fin&lt;/h2&gt;
&lt;p&gt;Feel free to poke around my blog's &lt;a href="https://github.com/amygdalama/blog-source"&gt;GitHub&lt;/a&gt; &lt;a href="https://github.com/amygdalama/amygdalama.github.io"&gt;repos&lt;/a&gt; (beware: there are unpublished draft posts in there). My configuration files in particular might be useful to you.&lt;/p&gt;
&lt;p&gt;If any of you Hacker Schoolers have trouble migrating your blog, I'd be happy to help!&lt;/p&gt;</summary><category term="pelican"></category><category term="blogging"></category><category term="wordpress"></category><category term="github pages"></category><category term="markdown"></category><category term="hacker school"></category></entry><entry><title>ipython and pandas are whoa!</title><link href="http://amygdalama.github.io/ipython-and-pandas-are-whoa.html" rel="alternate"></link><updated>2014-02-14T15:52:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-02-14:ipython-and-pandas-are-whoa.html</id><summary type="html">&lt;p&gt;In my first five months of using Python, I would create .py files and
then execute them in the terminal, like the loyal follower of &lt;a href="http://learnpythonthehardway.org/book/"&gt;LPTHW&lt;/a&gt;
that I am. While it's certainly necessary to be able to write Python
scripts and execute them from the terminal, I've learned that this
workflow isn't the best way to explore data in Python.&lt;/p&gt;
&lt;p&gt;I initially converted to Python from R, and since have missed the
interactiveness of working within RStudio (you don't have to re-run your
entire code every time you make a change and want to view the results)
and how R allows you to so quickly get to your data with data frames
built straight from text files. Enter: &lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt; and &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;. (Go
to their respective sites for installation instructions.)&lt;/p&gt;
&lt;p&gt;Julia Evans has a fantastic &lt;a href="https://github.com/jvns/pandas-cookbook"&gt;tutorial&lt;/a&gt; on how to use pandas in an
ipython notebook. Here, I'd like to explore the differences between
doing data analysis using ipython notebook and pandas versus writing .py
scripts using mainly standard Python packages and executing via the
terminal.&lt;/p&gt;
&lt;p&gt;Let's use the classic iris dataset for some simple analysis. First we
need to do some setup. Create a directory for our project (mine is
stored within my Projects directory that I keep in my Home directory.)
In the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/Projects/ipython-pandas-whoa
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projects
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create a Python script and open it with a text editor (I use
Sublime Text 2, which I've &lt;a href="http://www.sublimetext.com/docs/2/osx_command_line.html"&gt;configured&lt;/a&gt; to open files with the command
&lt;code&gt;subl&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;touch barbaric-script.py
&lt;span class="nv"&gt;$ &lt;/span&gt;subl barbaric-script.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should open up a blank .py file in Sublime. If you don't have
&lt;code&gt;subl&lt;/code&gt; set up, you can simply open up the blank barbaric-script.py file
we created with the &lt;code&gt;touch&lt;/code&gt; command in your text editor of choice.&lt;/p&gt;
&lt;p&gt;In the barbaric-script.py file, let's import the necessary packages.
We'll be using a couple standard python packages plus matplotlib.pyplot.
If you don't have matplotlib installed, you can find installation
instructions &lt;a href="http://matplotlib.org/users/installing.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the iris data, we'll use Python's built-in urllib2 and csv
packages and then do some basic formatting. Let's process the dataset as
a list of dictionaries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Open data from URL as a file-like object&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Create an empty list to store our data&lt;/span&gt;
&lt;span class="n"&gt;parsed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c"&gt;# Read file&lt;/span&gt;
&lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Define our headers since the file doesn&amp;#39;t contain explicit headers&lt;/span&gt;
&lt;span class="c"&gt;# I found these headers from looking at the documentation at&lt;/span&gt;
&lt;span class="c"&gt;# http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.names&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Sepal Width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Petal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Petal Width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Iterate through the rows in the file, and create a dictionary for each row&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c"&gt;# Dictionaries should have headers -&amp;gt; row&lt;/span&gt;
&lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c"&gt;# Delete the last row of parsed_data because it&amp;#39;s blank&lt;/span&gt;
&lt;span class="n"&gt;parsed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Let&amp;#39;s see what parsed_data looks like&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you should see when you execute barbaric-script.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python barbaric-script.py
&lt;span class="go"&gt;[{&amp;#39;Class&amp;#39;: &amp;#39;Iris-setosa&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Length&amp;#39;: &amp;#39;1.4&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Width&amp;#39;: &amp;#39;0.2&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Length&amp;#39;: &amp;#39;5.1&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Width&amp;#39;: &amp;#39;3.5&amp;#39;},&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;Class&amp;#39;: &amp;#39;Iris-setosa&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Length&amp;#39;: &amp;#39;1.4&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Width&amp;#39;: &amp;#39;0.2&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Length&amp;#39;: &amp;#39;4.9&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Width&amp;#39;: &amp;#39;3.0&amp;#39;},&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;Class&amp;#39;: &amp;#39;Iris-setosa&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Length&amp;#39;: &amp;#39;1.3&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Petal Width&amp;#39;: &amp;#39;0.2&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Length&amp;#39;: &amp;#39;4.7&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;Sepal Width&amp;#39;: &amp;#39;3.2&amp;#39;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! So we have our data formatted nicely. We have a list with
elements corresponding to each row in the file, and the elements in the
list are dictionaries. The keys in the dictionaries are the column
headers, and the values are the values associated with the respective
column header for that particular row. For example, the first
row/observation (printed as the first dictionary out of the three listed
above) is in the class &lt;code&gt;Iris-setosa&lt;/code&gt;, has a Petal Length of &lt;code&gt;1.4&lt;/code&gt;, a Petal
Width of &lt;code&gt;0.2&lt;/code&gt;, a Sepal Length of &lt;code&gt;5.1&lt;/code&gt;, and a Sepal Width of &lt;code&gt;3.5&lt;/code&gt;. Let's do
some plotting to explore our data. We can make a histogram! Add the
following lines to your barbaric-script.py file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Let&amp;#39;s create a list of the Sepal Lengths&lt;/span&gt;
&lt;span class="c"&gt;# I&amp;#39;m calling float on the entries because otherwise they&amp;#39;re stored as strings&lt;/span&gt;
&lt;span class="n"&gt;sepal_lengths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sepal_lengths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;#348ABD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try executing our script again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python barbaric-script.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A histogram should pop up in a separate window:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/barbaric.png" /&gt;&lt;/p&gt;
&lt;p&gt;That's a lot of code (18 lines)! And we didn't even do anything
complicated - just parsed our data and plotted a histogram. Also, notice
that each time you tried to fix a bug or add a feature (like plotting
the histogram), you had to execute the entire script again, rather than
just the piece where you fixed the bug. That doesn't matter too much
since our data is fairly small and the script doesn't require much time
to execute, but it would be pretty annoying if our script took longer to
run.&lt;/p&gt;
&lt;p&gt;Now let's try doing the same thing, but using pandas in an ipython
notebook. Use the terminal to run ipython notebook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projects/ipython-pandas-whoa
&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will set up a local server on your computer, which will serve the
ipython notebooks that are in your working directory (right now you
don't have any) to http://127.0.0.1:8888. This should automatically open
up in your browser.&lt;/p&gt;
&lt;p&gt;In the tab that opens in your browser, click "New Notebook". A new
ipython notebook will open up in another tab. A new cell will also open
up. Cells are places where you can write and execute code. This is what
a cell looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/ipythoncell.png" /&gt;&lt;/p&gt;
&lt;p&gt;To allow matplotlib to post plots within your notebook, rather than
opening up a separate window (like when we executed our .py script),
type the following into the cell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then to execute the cell, press shift+enter (which will execute the cell
your cursor is currently in and then automatically either move to the
next cell, if one exists, or open up a new cell). Once you press
shift+enter, your notebook should look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/ipythoncell.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the next cell, import the packages we'll be using, namely
matplotlib.pyplot and pandas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Press shift+enter again to execute the code (I'm going to stop telling
you to do this, but just assume that after each block of code you should
press shift+enter. If you get confused about what your notebook should
look like, look at my &lt;a href="http://nbviewer.ipython.org/github/amygdalama/ipython-pandas-whoa/blob/master/ipython-pandas-whoa.ipynb"&gt;example notebook&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;To process the iris data, we can use the built-in panda read_csv
parser. We can get to a easy-to-use data frame within three lines of
code!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Define our headers since the url doesn&amp;#39;t contain explicit headers&lt;/span&gt;
&lt;span class="c"&gt;# I found these headers from looking at the documentation at&lt;/span&gt;
&lt;span class="c"&gt;# http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.names&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Sepal Width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Petal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Petal Width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see what the data looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a beautifully formatted table! This is a pandas data
frame, which is similar to a data frame in R.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/table.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now let's plot a histogram for the Sepal Length column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# I use two brackets around &amp;#39;Sepal Length&amp;#39; to force pandas to make this&lt;/span&gt;
&lt;span class="c"&gt;# a data frame rather than just a series, which is like a numpy array.&lt;/span&gt;
&lt;span class="c"&gt;# The brackets here aren&amp;#39;t necessary, but makes printing sepal_lengths&lt;/span&gt;
&lt;span class="c"&gt;# prettier and makes it easier for us to combine sepal_lengths with other&lt;/span&gt;
&lt;span class="c"&gt;# data.&lt;/span&gt;
&lt;span class="n"&gt;sepal_lengths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="c"&gt;# Make the plot pretty!&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;display.mpl_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sepal_lengths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/quite_elegant.png" /&gt;&lt;/p&gt;
&lt;p&gt;By this point it should be fairly obvious that ipython and pandas are
both awesome for data analysis! They make Python a much more serious
contender as a tool for data analysis by giving you quick and easy
access to your data. In this simple example, the barbaric-script.py was
18 lines of code (disregarding comments, etc) and comparatively the
ipython notebook with pandas was only 10!&lt;/p&gt;
&lt;p&gt;For further reading, I definitely encourage you to check out Julia's
&lt;a href="https://github.com/jvns/pandas-cookbook"&gt;pandas cookbook&lt;/a&gt; (presented via ipython notebooks), on which
incidentally I'll be collaborating with her next week (eeeep)!&lt;/p&gt;
&lt;p&gt;My code for this post can be found on my &lt;a href="https://github.com/amygdalama/ipython-pandas-whoa"&gt;GitHub&lt;/a&gt;, and the ipython
notebook can be easily viewed on &lt;a href="http://nbviewer.ipython.org/github/amygdalama/ipython-pandas-whoa/blob/master/ipython-pandas-whoa.ipynb"&gt;NBViewer&lt;/a&gt;.&lt;/p&gt;</summary><category term="data analysis"></category><category term="hacker school"></category><category term="ipython"></category><category term="matplotlib"></category><category term="pandas"></category><category term="python"></category></entry><entry><title>Hacker School Day 2: Goals! Or, A Grasp For Sanity</title><link href="http://amygdalama.github.io/hacker-school-day-2-goals.html" rel="alternate"></link><updated>2014-02-12T10:02:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-02-12:hacker-school-day-2-goals.html</id><summary type="html">&lt;p&gt;I have to admit day 1 of Hacker School was fairly overwhelming for me. With so many amazing people to talk to and interesting projects to
collaborate on I felt a bit like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/allthetennisballs.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Credit to Hacker School alumnus Alex Beaulne for finding this perfect
gif.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In an attempt to regain a bit of sanity, yesterday I prioritized setting
goals for the batch and creating a semi-pubic to-do list. I also began
maintaining a list of learnings about how I can better approach Hacker
School and learning in general. My to-do list, goals, and learnings can
be found on my &lt;a href="https://github.com/amygdalama/hacker-school-progress"&gt;GitHub&lt;/a&gt;, which I'll be updating at least daily.&lt;/p&gt;
&lt;p&gt;In order to determine my goals, I answered the following questions, to
ensure that what I set out to accomplish aligned with my values and my
motivations for attending Hacker School. These lists are ranked somewhat
by importance, but probably aren't perfectly ordered.&lt;/p&gt;
&lt;h3 id="what-do-i-want-to-get-out-of-hacker-school"&gt;What do I want to get out of Hacker School?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Greater confidence, honesty, self-awareness, bravery&lt;/li&gt;
&lt;li&gt;Gain expertise in Python, Data Analysis, Machine Learning (currently
    beginner-/intermediate-level)&lt;/li&gt;
&lt;li&gt;Join a community of programmers/math nerds who will help motivate me
    to achieve greatness&lt;/li&gt;
&lt;li&gt;Frankly, a job&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="what-do-i-want-to-accomplish-at-hacker-school"&gt;What do I want to accomplish at Hacker School?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One large (1-month) project which
    requires pulling data from many sources and applying a recommender
    system, probably to recommend an optimal brunch spot for me, because
    brunch is awesome. This idea is inspired by &lt;a href="http://www.hilarymason.com/presentations-2/in-search-of-the-optimal-cheeseburger/"&gt;Hilary Mason&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A plethora of varying, small (1-day) analysis and machine learning
    projects&lt;/li&gt;
&lt;li&gt;Blog posts galore (3-5 per week) with a focus on writing
    tutorials/explaining benefits of various packages&lt;/li&gt;
&lt;li&gt;A successful pull request, contributing to an open source project or
    an existing tutorial&lt;/li&gt;
&lt;li&gt;Create a Python package (maybe with functions based on Jaynes'
    &lt;em&gt;Probability Theory: The Logic of Science&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Give a talk! (eeeep!)&lt;/li&gt;
&lt;li&gt;Revamped website possibly using Pelican/GitHub pages (nonessential,
    not a priority)&lt;/li&gt;
&lt;li&gt;Murdered out GitHub account (a pleasant side effect of all of the
    above)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="github"></category><category term="hacker school"></category></entry><entry><title>I moved cross-country for Hacker School and I'm only slightly convinced this is Real Life</title><link href="http://amygdalama.github.io/i-moved-cross-country-for-hacker-school-and-im-only-slightly-convinced-this-is-real-life.html" rel="alternate"></link><updated>2014-02-10T23:23:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-02-10:i-moved-cross-country-for-hacker-school-and-im-only-slightly-convinced-this-is-real-life.html</id><summary type="html">&lt;p&gt;Or, Hacker School: Day 1.&lt;/p&gt;
&lt;p&gt;Holy Shit! I have been fairly silent over the past month because I got
accepted to &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; and had to figure out the logistics of
quitting my job, moving cross-country, and living in the most expensive
city in the States without a proper job for at least 3 months.&lt;/p&gt;
&lt;p&gt;So allow me to re-iterate: Holy Shit! And somehow I did it and I'm alive
but not entirely certain it's not all just a dream.&lt;/p&gt;
&lt;p&gt;Today was the first day of a possibly insane but probably brilliant
adventure. Hacker School is self-described as a writers' retreat for
programmers. I've heard other Hacker Schoolers struggle to explain it as
a day spa for programmers, a hippie commune programming cult (okay, that
one was me), not a school, not necessarily for &lt;a href="http://amygdalama.github.io/images/hackers-movie.jpg"&gt;these&lt;/a&gt; kind of
Hackers, and more. The Hacker School founders and facilitators have
written extensively about what Hacker School is and is not, so dig into
their blog if you're curious. It's difficult to define, and they do a
much better job than I do.&lt;/p&gt;
&lt;p&gt;For the first day, I dedicated a good hour to getting my computer set up
properly (if you've seen my &lt;a href="http://mathamy.com/2013/12/27/wget-sanity-part-2-im-an-idiot-and-decided-to-switch-to-a-brewed-python-and-reinstall-the-scientific-stack-at-10pm/"&gt;wget&lt;/a&gt; posts, you'll know this
is something I've struggled with in the past). Then I had my first
attempt at pair programming in which I explained a few cool things about
&lt;a href="http://scikit-learn.org/"&gt;scikit-learn&lt;/a&gt; to another Hacker Schooler who had never used it
before. In turn she showed me some regression modeling in R.&lt;/p&gt;
&lt;p&gt;I also got to play with HS's resident Apple II. One of the other Hacker
Schoolers wrote a simple for loop to print out "DONG" 100 times. Why
would you do anything else?&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/appleiidong.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I am supremely honored and excited as Hell to be at Hacker School. For
the next three months, I will be surrounded by intellectually curious
nerds who are more thoughtful and self-aware than most people I know. I
hope I am brave and honest enough to confront the gaps in my knowledge,
ask questions, seek help, and ultimately get the most out of what will
be some of the most formidable months of my life. Which reminds me of
the Bene Gesserit litany:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I must not fear. Fear is the mind-killer. Fear is the little-death
that brings total obliteration. I will face my fear. I will permit it
to pass over me and through me. And when it has gone past me I will
turn to see fears path. Where the fear has gone there will be
nothing... Only I will remain.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="hacker school"></category></entry><entry><title>wget sanity part 2: I'm an idiot and decided to switch to a brewed python (and reinstall the scientific stack) at 10pm</title><link href="http://amygdalama.github.io/wget-sanity-part-2-im-an-idiot-and-decided-to-switch-to-a-brewed-python-and-reinstall-the-scientific-stack-at-10pm.html" rel="alternate"></link><updated>2013-12-27T01:08:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2013-12-27:wget-sanity-part-2-im-an-idiot-and-decided-to-switch-to-a-brewed-python-and-reinstall-the-scientific-stack-at-10pm.html</id><summary type="html">&lt;p&gt;For the past four months I've been using Anaconda's Python distribution
on my Macbook, which has been great (except for &lt;a href="http://mathamy.com/2013/12/02/homebrew-path-pythonpath/"&gt;Part 1&lt;/a&gt; of what has
now become a series), until I wanted to play with virtualenv. Apparently
Anaconda does not work well with virtualenv and suggests using its own
conda virtual environments and I don't take well to The Man telling me I
can't do something I want to do. So of course my reaction was to
&lt;code&gt;rm -rf /anaconda&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now I'm building my Python stack back from the ground up, and I've
decided to try out a &lt;a href="https://github.com/Homebrew/homebrew/wiki/Homebrew-and-Python"&gt;brewed&lt;/a&gt; Python. I've been following &lt;a href="http://www.lowindata.com/2013/installing-scientific-python-on-mac-os-x/"&gt;these&lt;/a&gt;
very elegant instructions to set up numpy, scipy, etc, on OSX, and it
worked flawlessly! Until matplotlib! I had all of the dependencies
(freetype, which I installed via Homebrew, zlib, and libpng), but I kept
getting thrown this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fatal error: &amp;#39;freetype/config/ftheader.h&amp;#39; file not found

#include &amp;lt;freetype/config/ftheader.h&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I finally found &lt;a href="http://stackoverflow.com/questions/1477144/compile-matplotlib-for-python-on-snow-leopard"&gt;this&lt;/a&gt; StackOverflow discussion with the suggestion to
type this into the terminal (for brewed python):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s /usr/local/include/freetype2/ /usr/include/freetype
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then &lt;code&gt;sudo pip install matplotlib&lt;/code&gt; worked! I don't rigorously
understand this magic, but based on my research this creates a symbolic
link from &lt;code&gt;/usr/include/freetype&lt;/code&gt; to &lt;code&gt;/usr/local/include/freetype2&lt;/code&gt;
(the brewed freetype). I'm guessing that matplotlib by default was
looking for freetype in &lt;code&gt;/usr/include/freetype&lt;/code&gt;, but it wasn't there
since Homebrew installs everything in &lt;code&gt;/usr/local&lt;/code&gt;. So, creating the
symbolic link allowed matplotlib to find freetype. In moments like these
I'm like 'Yer a wizard, Harry.'&lt;/p&gt;</summary><category term="homebrew"></category><category term="matplotlib"></category><category term="osx"></category><category term="python"></category></entry><entry><title>Using PyMC to Analyze A/B Testing Data</title><link href="http://amygdalama.github.io/using-pymc-to-analyze-ab-testing-data.html" rel="alternate"></link><updated>2013-12-24T22:23:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2013-12-24:using-pymc-to-analyze-ab-testing-data.html</id><summary type="html">&lt;p&gt;In Chapter 2 of &lt;a href="https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers"&gt;Bayesian Methods for Hackers&lt;/a&gt;, there's an example of
Bayesian analysis of an A/B test using simulated data. I decided to play
around with this analysis method with real A/B landing page test data
from one of my clients.&lt;/p&gt;
&lt;p&gt;This method uses PyMC to estimate the real conversion rate for each page
and Matplotlib to visually interpret the results.&lt;/p&gt;
&lt;p&gt;First, I import the relevant packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymc&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My client ran a landing page test with the following results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;clicks_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1135&lt;/span&gt;
&lt;span class="n"&gt;orders_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;clicks_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1149&lt;/span&gt;
&lt;span class="n"&gt;orders_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The observed conversion rates are 44% and 1.48% for pages A and B,
respectively, but I'd like to be confident that the true conversion rate
of page B is higher than page A.&lt;/p&gt;
&lt;p&gt;To format this data for the analysis, I create a numpy array for each
page with 1s representing orders and 0s representing clicks without an
order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r_&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clicks_A&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;orders_A&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;orders_A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;data_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r_&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clicks_B&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;orders_B&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;orders_B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next I assign distributions to my prior beliefs of &lt;code&gt;p_A&lt;/code&gt; and &lt;code&gt;p_B&lt;/code&gt;, the unknown, true conversion rates. I
assume, for simplicity, that the distributions are uniform (i.e. I have
no prior knowledge of what &lt;code&gt;p_A&lt;/code&gt; and 'p_B' are).
[Note: the rest of the code in blog post is taken from [the book].&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;p_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;p_A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;p_B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I want to estimate the difference in true conversion rates, I need
to define a variable &lt;code&gt;delta&lt;/code&gt;, which equals &lt;code&gt;p_B - p_A&lt;/code&gt;. Since, if I know
both &lt;code&gt;p_A&lt;/code&gt; and &lt;code&gt;p_B&lt;/code&gt;, I can calculate &lt;code&gt;delta&lt;/code&gt;, it's a deterministic
variable. In PyMC, deterministic variables are created using a function
with a &lt;code&gt;pymc.deterministic&lt;/code&gt; wrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@pm.deterministic&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_A&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p_B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p_B&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p_A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next I add the observed data to PyMC variables and run an inference
algorithm (I don't understand what this code is actually doing yet - an
explanation is coming up in Chapter 3):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obs_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bernoulli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;obs_A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;p_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obs_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bernoulli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;obs_B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mcmc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MCMC&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;p_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obs_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obs_B&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;mcmc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I plot the posterior distributions for the three unknowns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;p_A_samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcmc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p_A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:]&lt;/span&gt;
&lt;span class="n"&gt;p_B_samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcmc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p_B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:]&lt;/span&gt;
&lt;span class="n"&gt;delta_samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcmc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:]&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;311&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;035&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_A_samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;histtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stepfilled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;posterior of $p_A$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#A60628&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upper right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Posterior distributions of $p_A$, $p_B$, and delta&lt;/span&gt;
&lt;span class="n"&gt;unknowns&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;035&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_B_samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;histtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stepfilled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;posterior of $p_B$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#467821&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;edgecolor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upper right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;313&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;histtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stepfilled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;posterior of $p_B$ - $p_A$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#7A68A6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;normed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;edgecolor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;upper right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/pymc_posteriors.png" /&gt;&lt;/p&gt;
&lt;p&gt;I can also compute the probability that the true conversion rate of page
A, &lt;code&gt;p_A&lt;/code&gt;, is better than the true conversion rate of page
B, &lt;code&gt;p_A&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Probability site A is BETTER than site B: &lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_samples&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Probability site A is WORSE than site B: &lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_samples&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should print out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Probability page A is BETTER than page B: 0.006&lt;/span&gt;
&lt;span class="go"&gt;Probability page A is WORSE than page B: 0.994&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's very safe to say (as long as our data was collected properly) that
page B is better than page A, and these results come very intuitively
from looking at the graphs.&lt;/p&gt;
&lt;p&gt;The full code can be found on my &lt;a href="https://github.com/amygdalama/tutorials/blob/master/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/MySourceFiles/Chapter2/ab-real-data.py"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="ab testing"></category><category term="matplotlib"></category><category term="numpy"></category><category term="pymc"></category><category term="python"></category></entry><entry><title>wget Sanity after Installing Homebrew and F*cking Up PATH/PYTHONPATH</title><link href="http://amygdalama.github.io/homebrew-path-pythonpath.html" rel="alternate"></link><updated>2013-12-02T21:48:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2013-12-02:homebrew-path-pythonpath.html</id><summary type="html">&lt;p&gt;About a week ago, I installed &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; on my OSX, mostly because I wanted to use Unix's &lt;code&gt;wget&lt;/code&gt; command (It's like Unix's &lt;a href="http://en.wikipedia.org/wiki/List_of_spells_in_Harry_Potter"&gt;accio&lt;/a&gt;! &lt;code&gt;wget horcrux&lt;/code&gt;. &lt;code&gt;wget firebolt&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Unfortunately, doing so installed a new version of python on my machine and switched the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PYTHONPATH&lt;/code&gt; away from my &lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt; version of python (which is the version I use and that houses all of my beloved installed packages). After hours of
struggle, I figured out how to solve this problem.&lt;/p&gt;
&lt;p&gt;First, to see if you have this problem, type in the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which will give you output looking something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;span class="go"&gt;python is /usr/local/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /Library/Frameworks/Python.framework/Versions/2.7/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /usr/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /usr/local/bin/python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a hierarchical list of the pythons installed on your machine.
The python that you actually want executed when you type &lt;code&gt;python&lt;/code&gt; into
the terminal should be at the top of the list. In my situation,
 &lt;code&gt;//anaconda/bin/python&lt;/code&gt; is my preferred python. To get this version to
the top of the list, you need to edit your &lt;code&gt;PATH&lt;/code&gt;, which tells your
machine the directory to find &lt;code&gt;python&lt;/code&gt; when you type it in the terminal.&lt;/p&gt;
&lt;p&gt;Similarly, you'll probably need to update your &lt;code&gt;PYTHONPATH&lt;/code&gt;, which tells
python where to look for modules to import. To see where python is
currently looking for modules, run &lt;code&gt;python&lt;/code&gt; in your terminal and type the
following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As output, python will print out a list of the directories where it
looks for modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/setuptools-1.3-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.4.1-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages&amp;#39;, &amp;#39;/Users/amyhanlon&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;/Library/Python/2.7/site-packages&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To fix this problem, open the hidden file called &lt;code&gt;~/.bash_profile&lt;/code&gt; which exists in your home directory (the &lt;code&gt;~&lt;/code&gt; symbolizes your home directory).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;subl ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I'm using the &lt;code&gt;subl&lt;/code&gt; command which opens files in Sublime.&lt;/p&gt;
&lt;p&gt;The file contents should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Setting `PATH` for Python 2.7&lt;/span&gt;
&lt;span class="c"&gt;# The original version is saved in .bash_profile.pysave&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;PATH&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c"&gt;# added by Anaconda 1.7.0 installer&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//anaconda/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last &lt;code&gt;PATH=&lt;/code&gt; and &lt;code&gt;PYTHONPATH=&lt;/code&gt; lines should be directed to the Anaconda location of python, and in this case they aren't. To fix this, comment out or delete lines that incorrectly assign the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PYTHONPATH&lt;/code&gt; variables, and
add lines that assign the correct variables. After making edits, my file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Setting PATH for Python 2.7&lt;/span&gt;
&lt;span class="c"&gt;# The original version is saved in .bash_profile.pysave&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//anaconda/bin:${PATH}&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;PATH&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c"&gt;# added by Anaconda 1.7.0 installer&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//anaconda/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# export PATH=/usr/local/bin:$PATH&lt;/span&gt;
&lt;span class="c"&gt;# export&lt;/span&gt;
&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//anaconda/lib/python2.7/site-packages:$PYTHONPATH&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file. Then, in the terminal (after exiting python), source the
file, and see if you've fixed the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PYTHONPATH&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_profile
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; -a python
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /usr/local/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /Library/Frameworks/Python.framework/Versions/2.7/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is //anaconda/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /usr/bin/python&lt;/span&gt;
&lt;span class="go"&gt;python is /usr/local/bin/python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you should see the Anaconda python (or your preferable python) at
the top of the list in the output.&lt;/p&gt;
&lt;p&gt;Check your &lt;code&gt;PYTHONPATH&lt;/code&gt; in the python interpreter by using the same method as before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;&amp;#39;, &amp;#39;//anaconda/lib/python2.7/site-packages/gspread-0.1.0-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/fuzzywuzzy-0.2-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/inflect-0.2.4-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/beautifulsoup4-4.3.2-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/pyicloud-0.3.0-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/foursquare-20130707-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/poster-0.8.1-py2.7.egg&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages&amp;#39;, &amp;#39;/Users/amyhanlon&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python27.zip&amp;#39;, &amp;#39;//anaconda/lib/python2.7&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/plat-darwin&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/plat-mac&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/plat-mac/lib-scriptpackages&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/lib-tk&amp;#39;, &amp;#39;//anaconda/lib/python2.7/lib-old&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/lib-dynload&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/PIL&amp;#39;,&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;//anaconda/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the terminal is using my Anaconda version of python and is looking
in the Anaconda library for my packages! Viola!&lt;/p&gt;</summary><category term="anaconda"></category><category term="homebrew"></category><category term="osx"></category><category term="python"></category><category term="unix"></category></entry><entry><title>Adventures in Miami: Bullish Conference 2013</title><link href="http://amygdalama.github.io/adventures-in-miami-bullish-conference-2013.html" rel="alternate"></link><updated>2013-12-02T13:48:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2013-12-02:adventures-in-miami-bullish-conference-2013.html</id><summary type="html">&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/bullicorns.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Photo by Julie Lavoie)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Adjusting to Real Life after a weekend in South Beach, filled with
mojito-flavored space popsicles, champagne, Cuban food, unicorn puzzles,
and badass, ambitious, feminist women is like coming down from some
fantastic drug-induced hallucination. This morning I was unpleasantly
surprised that there wasn't a sunkissed cabana man waiting to serve me
delicious iced coffee, and the absence of poolside complimentary wine
hour at 5pm will only deepen my wounds. (And yes! Cabana men are
real! Unfortunately for me they are all either teenagers or gay or both,
and even more unfortunately none agreed to move to Austin to volunteer
as my butler.)&lt;/p&gt;
&lt;p&gt;Fortunately, we Bullicorns are well-equipped for aggressively
confronting this cabana man-less Real World, because alongside
&lt;a href="http://www.thegloss.com/2012/03/21/career/bullish-life-achieve-goals-and-glory-by-recreating-like-a-total-fcking-badass-126/"&gt;recreating like a total fucking badass&lt;/a&gt;, &lt;a href="http://www.bullishconference.com/"&gt;BullCon&lt;/a&gt; was packed with
motivating workshops. Topics included negotiation with Ji Eun (Jamie)
Lee, who frequently speaks at women's conferences on the topic; planning
your 2014 and the top 10 principles of bullishness with Jen Dzuira,
organizer of the conference and writer of the &lt;em&gt;Bullish&lt;/em&gt; column; time
management with Laura Vanderkam, author of &lt;em&gt;What the Most Successful
People Do Before Breakfast&lt;/em&gt;;  all the tools to do all the things (and
the power of being your own assistant, at least if you don't have one)
with Haley Mlotek, publisher of &lt;em&gt;Worn&lt;/em&gt; magazine and Jen's virtual
assistant; and pitching yourself and your ideas (without selling out)
with Jennifer Wright, Editor-in-chief at the &lt;em&gt;New York Observer&lt;/em&gt;.
Write-ups on each of the workshops can be found on the &lt;a href="http://www.getbullish.com/tag/bullcon2013/"&gt;Bullish&lt;/a&gt; blog.&lt;/p&gt;
&lt;p&gt;BullCon was the perfect balance of gentlewomanly recreation and
productivity, and I'm excited to see the progress each of us makes in
the next year. See you ladies in 2014 (and on the internet)!&lt;/p&gt;</summary><category term="bullish"></category><category term="career management"></category><category term="negotiation"></category><category term="pitching"></category><category term="time management"></category></entry><entry><title>Visualizing Social Circles Using Facebook Data</title><link href="http://amygdalama.github.io/visualizing-social-circles-using-facebook-data.html" rel="alternate"></link><updated>2013-11-26T23:07:00-05:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2013-11-26:visualizing-social-circles-using-facebook-data.html</id><summary type="html">&lt;p&gt;Intrigued by David Smith's &lt;a href="http://blog.revolutionanalytics.com/2013/11/how-to-analyze-you-facebook-friends-network-with-r.html"&gt;Facebook friends network analysis&lt;/a&gt; using
the Rfacebook package, I decided to try it out on my own group of
friends, to see if my social circles are clique-y ala &lt;a href="http://amygdalama.github.io/images/nshs.jpg"&gt;North Shore High
School&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="http://amygdalama.github.io/images/fb-network.png" /&gt;&lt;/p&gt;
&lt;p&gt;It turns out the social circles in my network were visualized almost
perfectly! The smallest group to the far right of the graph contains
family members, the large group at the top contains current co-workers,
and the large group at the bottom contains friends in the Austin cyclist
scene. Other clusters are friends from high school, friends from
college, and bar friends. The most isolated group is my family. The
groups with the most connections to each other are my current coworkers,
cyclists, and bar friends, which makes sense, because they are roughly
in the same age group and live (or have lived) in Austin, a fairly
connected city. Now I'm wondering how to get the data to see if Austin
really is more connected than other cities or if it's just in our
collective imagination.&lt;/p&gt;
&lt;p&gt;Thanks to David for the &lt;a href="http://blog.revolutionanalytics.com/2013/11/how-to-analyze-you-facebook-friends-network-with-r.html"&gt;tutorial&lt;/a&gt; on
graphing social networks and to Julianhi for his &lt;a href="http://thinktostart.wordpress.com/2013/11/19/analyzing-facebook-with-r/"&gt;tutorial&lt;/a&gt; on setting
up Rfacebook.&lt;/p&gt;</summary><category term="igraph"></category><category term="r"></category><category term="rfacebook"></category><category term="networks"></category></entry></feed>