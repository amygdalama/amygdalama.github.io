<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Amy Hanlon</title><link href="http://amygdalama.github.io/" rel="alternate"></link><link href="http://amygdalama.github.io/feeds/tags/compilers.atom.xml" rel="self"></link><id>http://amygdalama.github.io/</id><updated>2014-03-14T00:00:00-04:00</updated><entry><title>Replacing `import` with `accio`: A Dive into Bootstrapping and Python's Grammar</title><link href="http://amygdalama.github.io/import-accio-bootstrapping-python-grammar.html" rel="alternate"></link><updated>2014-03-14T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-14:import-accio-bootstrapping-python-grammar.html</id><summary type="html">&lt;p&gt;At &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;, I've been building an alternate universe Python by overwriting builtin functions and statements with Harry Potter spells. This is a thing you can do at Hacker School!&lt;/p&gt;
&lt;p&gt;Although this project started as a joke, I've quickly descended so deeply into Python internals that I've, with the guidance of the fabulous Hacker School facilitator &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, made edits to the CPython source code, and compiled a Python to compile a Python. All to replace the &lt;code&gt;import&lt;/code&gt; statement with &lt;code&gt;accio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But before we get into compiling the Harry Potter Python I lovingly call Nagini, let's first talk about some Python internals basics, with spells as examples, of course.&lt;/p&gt;
&lt;h1&gt;Overwriting Builtin Functions&lt;/h1&gt;
&lt;p&gt;Python builtin functions are stored in a module called &lt;code&gt;__builtins__&lt;/code&gt; that's automatically imported on startup. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; dir(__builtins__)
[&amp;#39;ArithmeticError&amp;#39;, &amp;#39;AssertionError&amp;#39;, &amp;#39;AttributeError&amp;#39;, &amp;#39;BaseException&amp;#39;, &amp;#39;BufferError&amp;#39;, &amp;#39;BytesWarning&amp;#39;, &amp;#39;DeprecationWarning&amp;#39;, &amp;#39;EOFError&amp;#39;, &amp;#39;Ellipsis&amp;#39;, &amp;#39;EnvironmentError&amp;#39;, &amp;#39;Exception&amp;#39;, &amp;#39;False&amp;#39;, &amp;#39;FloatingPointError&amp;#39;, &amp;#39;FutureWarning&amp;#39;, &amp;#39;GeneratorExit&amp;#39;, &amp;#39;IOError&amp;#39;, &amp;#39;ImportError&amp;#39;, &amp;#39;ImportWarning&amp;#39;, &amp;#39;IndentationError&amp;#39;, &amp;#39;IndexError&amp;#39;, &amp;#39;KeyError&amp;#39;, &amp;#39;KeyboardInterrupt&amp;#39;, &amp;#39;LookupError&amp;#39;, &amp;#39;MemoryError&amp;#39;, &amp;#39;NameError&amp;#39;, &amp;#39;None&amp;#39;, &amp;#39;NotImplemented&amp;#39;, &amp;#39;NotImplementedError&amp;#39;, &amp;#39;OSError&amp;#39;, &amp;#39;OverflowError&amp;#39;, &amp;#39;PendingDeprecationWarning&amp;#39;, &amp;#39;ReferenceError&amp;#39;, &amp;#39;RuntimeError&amp;#39;, &amp;#39;RuntimeWarning&amp;#39;, &amp;#39;StandardError&amp;#39;, &amp;#39;StopIteration&amp;#39;, &amp;#39;SyntaxError&amp;#39;, &amp;#39;SyntaxWarning&amp;#39;, &amp;#39;SystemError&amp;#39;, &amp;#39;SystemExit&amp;#39;, &amp;#39;TabError&amp;#39;, &amp;#39;True&amp;#39;, &amp;#39;TypeError&amp;#39;, &amp;#39;UnboundLocalError&amp;#39;, &amp;#39;UnicodeDecodeError&amp;#39;, &amp;#39;UnicodeEncodeError&amp;#39;, &amp;#39;UnicodeError&amp;#39;, &amp;#39;UnicodeTranslateError&amp;#39;, &amp;#39;UnicodeWarning&amp;#39;, &amp;#39;UserWarning&amp;#39;, &amp;#39;ValueError&amp;#39;, &amp;#39;Warning&amp;#39;, &amp;#39;ZeroDivisionError&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;__debug__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__import__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;abs&amp;#39;, &amp;#39;all&amp;#39;, &amp;#39;any&amp;#39;, &amp;#39;apply&amp;#39;, &amp;#39;basestring&amp;#39;, &amp;#39;bin&amp;#39;, &amp;#39;bool&amp;#39;, &amp;#39;buffer&amp;#39;, &amp;#39;bytearray&amp;#39;, &amp;#39;bytes&amp;#39;, &amp;#39;callable&amp;#39;, &amp;#39;chr&amp;#39;, &amp;#39;classmethod&amp;#39;, &amp;#39;cmp&amp;#39;, &amp;#39;coerce&amp;#39;, &amp;#39;compile&amp;#39;, &amp;#39;complex&amp;#39;, &amp;#39;copyright&amp;#39;, &amp;#39;credits&amp;#39;, &amp;#39;delattr&amp;#39;, &amp;#39;dict&amp;#39;, &amp;#39;dir&amp;#39;, &amp;#39;divmod&amp;#39;, &amp;#39;enumerate&amp;#39;, &amp;#39;eval&amp;#39;, &amp;#39;execfile&amp;#39;, &amp;#39;exit&amp;#39;, &amp;#39;file&amp;#39;, &amp;#39;filter&amp;#39;, &amp;#39;float&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;frozenset&amp;#39;, &amp;#39;getattr&amp;#39;, &amp;#39;globals&amp;#39;, &amp;#39;hasattr&amp;#39;, &amp;#39;hash&amp;#39;, &amp;#39;help&amp;#39;, &amp;#39;hex&amp;#39;, &amp;#39;id&amp;#39;, &amp;#39;input&amp;#39;, &amp;#39;int&amp;#39;, &amp;#39;intern&amp;#39;, &amp;#39;isinstance&amp;#39;, &amp;#39;issubclass&amp;#39;, &amp;#39;iter&amp;#39;, &amp;#39;len&amp;#39;, &amp;#39;license&amp;#39;, &amp;#39;list&amp;#39;, &amp;#39;locals&amp;#39;, &amp;#39;long&amp;#39;, &amp;#39;map&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;memoryview&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;next&amp;#39;, &amp;#39;object&amp;#39;, &amp;#39;oct&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;ord&amp;#39;, &amp;#39;pow&amp;#39;, &amp;#39;print&amp;#39;, &amp;#39;property&amp;#39;, &amp;#39;quit&amp;#39;, &amp;#39;range&amp;#39;, &amp;#39;raw_input&amp;#39;, &amp;#39;reduce&amp;#39;, &amp;#39;reload&amp;#39;, &amp;#39;repr&amp;#39;, &amp;#39;reversed&amp;#39;, &amp;#39;round&amp;#39;, &amp;#39;set&amp;#39;, &amp;#39;setattr&amp;#39;, &amp;#39;slice&amp;#39;, &amp;#39;sorted&amp;#39;, &amp;#39;staticmethod&amp;#39;, &amp;#39;str&amp;#39;, &amp;#39;sum&amp;#39;, &amp;#39;super&amp;#39;, &amp;#39;tuple&amp;#39;, &amp;#39;type&amp;#39;, &amp;#39;unichr&amp;#39;, &amp;#39;unicode&amp;#39;, &amp;#39;vars&amp;#39;, &amp;#39;xrange&amp;#39;, &amp;#39;zip&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Overwriting Python builtins is surprisingly easy! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; wingardium_leviosa = __builtins__.float

&amp;gt;&amp;gt;&amp;gt; del __builtins__.float

&amp;gt;&amp;gt;&amp;gt; float(3)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;float&amp;#39; is not defined

&amp;gt;&amp;gt;&amp;gt; wingardium_leviosa(3)
3.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, overwriting &lt;code&gt;import&lt;/code&gt; is not so easy. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio = import
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    accio = import
                 ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python is expecting the name of a module after &lt;code&gt;import&lt;/code&gt;, and thus it throws a &lt;code&gt;SyntaxError&lt;/code&gt;. This is an effect of &lt;code&gt;import x&lt;/code&gt; being a &lt;em&gt;statement&lt;/em&gt;, rather than a &lt;em&gt;function&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Hm. I remember seeing the function &lt;code&gt;__import__&lt;/code&gt; listed when we ran &lt;code&gt;dir(__builtins__)&lt;/code&gt;. Maybe we can overwrite that instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio = __builtins__.__import__
&amp;gt;&amp;gt;&amp;gt; accio sys
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    accio sys
            ^
SyntaxError: invalid syntax

# :(
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if we tried calling &lt;code&gt;accio&lt;/code&gt; like a function?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio(sys)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;sys&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe we need to pass 'sys' as a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio(&amp;#39;sys&amp;#39;)
&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;

# Ooh!

&amp;gt;&amp;gt;&amp;gt; sys = accio(&amp;#39;sys&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; sys
&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha. So the statement &lt;code&gt;import x&lt;/code&gt; probably does something like:&lt;br /&gt;
    1. call the &lt;code&gt;__import__&lt;/code&gt; function on &lt;code&gt;x&lt;/code&gt;: &lt;code&gt;__builtins__.__import__('x')&lt;/code&gt;&lt;br /&gt;
    2. assign the name &lt;code&gt;x&lt;/code&gt; to the module returned by &lt;code&gt;__import__&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;And &lt;code&gt;import sys&lt;/code&gt; is like shorthand for the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; sys = __builtins__.__import__(&amp;#39;sys&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Here I'm only describing simple &lt;code&gt;import&lt;/code&gt; statements, but more complex statements like &lt;code&gt;from x import y.w, y.z&lt;/code&gt; work similarly.)&lt;/p&gt;
&lt;p&gt;So we have a way to add &lt;code&gt;accio&lt;/code&gt; as a function, but not as a statement. I'm unsatisfied. &lt;/p&gt;
&lt;p&gt;For fun, can we delete import?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; del import
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    del import
             ^
SyntaxError: invalid syntax

&amp;gt;&amp;gt;&amp;gt; del __builtins__.__import__
&amp;gt;&amp;gt;&amp;gt; import os
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ImportError: __import__ not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kind of! Although I want &lt;code&gt;import os&lt;/code&gt; to be a &lt;code&gt;SyntaxError&lt;/code&gt; rather than an &lt;code&gt;ImportError&lt;/code&gt; because clearly &lt;code&gt;import&lt;/code&gt; is the wrong thing to type and the user should know to type &lt;code&gt;accio&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;So, to completely overwrite &lt;code&gt;import&lt;/code&gt; with &lt;code&gt;accio&lt;/code&gt;, we'll need to learn where Python defines statements.&lt;/p&gt;
&lt;h1&gt;Grammar&lt;/h1&gt;
&lt;p&gt;Eli Bendersky wrote a great &lt;a href="http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/"&gt;blog post&lt;/a&gt; about adding an &lt;code&gt;until&lt;/code&gt; statement to Python. Since we want to &lt;em&gt;replace&lt;/em&gt; a statement, rather than add one, our method will be a bit different.&lt;/p&gt;
&lt;p&gt;Regardless, it looks like the place to start for changing Python's statements is in the &lt;code&gt;Grammar&lt;/code&gt; file in the Python &lt;a href="http://docs.python.org/devguide/setup.html"&gt;source code&lt;/a&gt;. &lt;strong&gt;Python source code!&lt;/strong&gt; Isn't this &lt;em&gt;fun?!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Python's source code is stored in a Mercurial repository, so first we'll have to install Mercurial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can clone CPython (like &lt;code&gt;git clone&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone http://hg.python.org/cpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take a whole minute. Grab a coffee.&lt;/p&gt;
&lt;p&gt;In the Python Mercurial repo, different versions of Python have different branches. By default we're on a Python3 branch. I'm still running Python2 on my machine, so let's checkout version 2.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;cpython
&lt;span class="nv"&gt;$ &lt;/span&gt;hg checkout 2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's &lt;a href="http://docs.python.org/devguide/setup.html"&gt;compile CPython&lt;/a&gt; and see if it works!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --with-pydebug
&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I get a warning message saying some modules were unable to be built, but I am unstoppable. We are unstoppable. Let's continue.&lt;/p&gt;
&lt;p&gt;It seems like the place to start is in the file &lt;code&gt;Grammar/Grammar&lt;/code&gt;, so let's start poking around there. &lt;a href="http://docs.python.org/2/reference/grammar.html"&gt;This&lt;/a&gt; is what it looks like. Searching for 'import' brings us to lines 52-60:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_stmt: import_name | import_from
import_name: &amp;#39;import&amp;#39; dotted_as_names
import_from: (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;import&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names))
import_as_name: NAME [&amp;#39;as&amp;#39; NAME]
dotted_as_name: dotted_name [&amp;#39;as&amp;#39; NAME]
import_as_names: import_as_name (&amp;#39;,&amp;#39; import_as_name)* [&amp;#39;,&amp;#39;]
dotted_as_names: dotted_as_name (&amp;#39;,&amp;#39; dotted_as_name)*
dotted_name: NAME (&amp;#39;.&amp;#39; NAME)*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! We can kind of understand what's going on here just from reading. It looks like an &lt;code&gt;import_stmt&lt;/code&gt; is either an &lt;code&gt;import_name&lt;/code&gt; or an &lt;code&gt;import_from&lt;/code&gt; which have the format &lt;code&gt;import x&lt;/code&gt; and &lt;code&gt;from x import y&lt;/code&gt;, respectively. What happens if we just change 'import' to 'accio' in lines 53 and 55? Let's try it. After making the change and saving the &lt;code&gt;Grammar&lt;/code&gt; file, type the following command to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ach. If only it was that easy. This throws an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;151&lt;/span&gt;, in &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_module_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;113&lt;/span&gt;, in &lt;span class="n"&gt;_get_module_details&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/pkgutil.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;283&lt;/span&gt;, in &lt;span class="n"&gt;get_code&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/sysconfig.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;4&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This error occurs while trying to execute a Python script! Compiling CPython requires running Python scripts! Interesting. Maybe at this point we remember that Python is &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(compilers)"&gt;bootstrapped&lt;/a&gt;. We look back at the &lt;a href="http://docs.python.org/devguide/setup.html"&gt;Python Developer's Guide&lt;/a&gt; and we find that &lt;em&gt;"Vast areas of CPython are written completely in Python: as of this writing, CPython contains slightly more Python code than C."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So then we wonder - when CPython is compiling, does it execute Python scripts with the Python that's currently being compiled? Or does it use another already-compiled muggle Python, like our environment Python? If it uses the Python that's currently being compiled, we'll need to change these .py scripts to say &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Otherwise, what do we do? Our muggle Python only understands &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;...&lt;/p&gt;
&lt;p&gt;Let's look into one of the .py scripts within &lt;code&gt;Lib&lt;/code&gt; to investigate. Here's the first line of the &lt;code&gt;Lib/keyword.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#! /usr/bin/env python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! This script is executed via our environment Python! Our environment Python only understands &lt;code&gt;import&lt;/code&gt;. So &lt;code&gt;keyword.py&lt;/code&gt; needs to have &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;. However, since we got a &lt;code&gt;SyntaxError&lt;/code&gt; on an &lt;code&gt;import&lt;/code&gt; statement, that must mean that at least sometimes during the process of compiling we're required to use &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Hrm... Any ideas?&lt;/p&gt;
&lt;h1&gt;Yo Dawg, I Heard You Like Pythons&lt;/h1&gt;
&lt;p&gt;What if we did something crazy like compiled an intermediary Python that understands &lt;em&gt;both&lt;/em&gt; &lt;code&gt;accio&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;import&lt;/code&gt;, and used &lt;em&gt;that&lt;/em&gt; Python to compile &lt;em&gt;another&lt;/em&gt; Python that only understands &lt;code&gt;accio&lt;/code&gt;? (Full credit for this idea goes to &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So, for our intermediary Python we'll need to edit the &lt;code&gt;Grammar&lt;/code&gt; file like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_name: &amp;#39;import&amp;#39; dotted_as_names | &amp;#39;accio&amp;#39; dotted_as_names
import_from: ((&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;import&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names)) |
              (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;accio&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names)))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus this Python should understand both &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;accio&lt;/code&gt;. Let's compile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eep! No errors! Just the warning about missing modules that we also received before we made any changes! Now we need to prepend our $PATH so that this Python will become our environment Python (but only for this terminal session). That way this intermediary Python will be used to compile our final Python. Let's make a symlink to the &lt;code&gt;python.exe&lt;/code&gt; that was created when we ran &lt;code&gt;make&lt;/code&gt;, and then add the path to that symlink to our $PATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll need to duplicate this entire &lt;code&gt;cpython&lt;/code&gt; directory and make our final Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../
&lt;span class="nv"&gt;$ &lt;/span&gt;cp -r cpython nagini-python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;nagini-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to change the &lt;code&gt;Grammar&lt;/code&gt; file for this Python to only allow &lt;code&gt;accio&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_name: &amp;#39;accio&amp;#39; dotted_as_names
import_from: (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;accio&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we want to replace every instance of &lt;code&gt;import&lt;/code&gt; in every .py file to &lt;code&gt;accio&lt;/code&gt;. We'll use a blackbox bash command to accomplish that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="sb"&gt;`&lt;/span&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;sed -i &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/[[:&amp;lt;:]]import[[:&amp;gt;:]]/accio/g&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we just need to compile this new Python!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's make a symlink to this Python...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And fire it up...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; import sys&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; accio sys&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; sys.modules.keys()&lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;copy_reg&amp;#39;, &amp;#39;sre_compile&amp;#39;, &amp;#39;_sre&amp;#39;, &amp;#39;encodings&amp;#39;, &amp;#39;site&amp;#39;, &amp;#39;__builtin__&amp;#39;, &amp;#39;sysconfig&amp;#39;, &amp;#39;__main__&amp;#39;, &amp;#39;encodings.encodings&amp;#39;, &amp;#39;abc&amp;#39;, &amp;#39;posixpath&amp;#39;, &amp;#39;_weakrefset&amp;#39;, &amp;#39;errno&amp;#39;, &amp;#39;encodings.codecs&amp;#39;, &amp;#39;sre_constants&amp;#39;, &amp;#39;re&amp;#39;, &amp;#39;_abcoll&amp;#39;, &amp;#39;types&amp;#39;, &amp;#39;_codecs&amp;#39;, &amp;#39;encodings.__builtin__&amp;#39;, &amp;#39;_warnings&amp;#39;, &amp;#39;genericpath&amp;#39;, &amp;#39;stat&amp;#39;, &amp;#39;zipimport&amp;#39;, &amp;#39;_sysconfigdata&amp;#39;, &amp;#39;warnings&amp;#39;, &amp;#39;UserDict&amp;#39;, &amp;#39;encodings.ascii&amp;#39;, &amp;#39;sys&amp;#39;, &amp;#39;_osx_support&amp;#39;, &amp;#39;codecs&amp;#39;, &amp;#39;os.path&amp;#39;, &amp;#39;sitecustomize&amp;#39;, &amp;#39;signal&amp;#39;, &amp;#39;traceback&amp;#39;, &amp;#39;linecache&amp;#39;, &amp;#39;posix&amp;#39;, &amp;#39;encodings.aliases&amp;#39;, &amp;#39;exceptions&amp;#39;, &amp;#39;sre_parse&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;_weakref&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HOLY SHIT IT WORKS!&lt;/p&gt;
&lt;h1&gt;Fin&lt;/h1&gt;
&lt;p&gt;That's it. We just compiled two Pythons and fooled around with source code for the sake of a joke. Grab yourselves a beer, friends. Victory.&lt;/p&gt;
&lt;p&gt;My super messy and not-really-prepared-for-the-general-public GitHub &lt;a href="https://github.com/amygdalama/nagini"&gt;repo&lt;/a&gt; contains both versions of Python, for reference. &lt;/p&gt;</summary><category term="python"></category><category term="harry potter"></category><category term="bootstrapping"></category><category term="cpython"></category><category term="compilers"></category><category term="grammar"></category><category term="hacker school"></category></entry></feed>