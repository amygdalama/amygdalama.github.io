<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Amy Hanlon</title><link href="http://amygdalama.github.io/" rel="alternate"></link><link href="http://amygdalama.github.io/feeds/tags/speaking.atom.xml" rel="self"></link><id>http://amygdalama.github.io/</id><updated>2015-08-17T00:00:00-04:00</updated><entry><title>Video: How reviewing code makes me a better programmer!</title><link href="http://amygdalama.github.io/video-how-reviewing-code-makes-me-a-better-programmer.html" rel="alternate"></link><updated>2015-08-17T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2015-08-17:video-how-reviewing-code-makes-me-a-better-programmer.html</id><summary type="html">&lt;p&gt;Many developers see code review as a way to keep code compliant and to reduce bugs, but code review can be so much more than that!
In this talk, I'll share how reviewing code became one of the most valuable ways for me to become a better programmer.
I'll cover how you can learn more from code review, how you can improve your skills as a reviewer, and how to influence your colleagues to give you better code review.&lt;/p&gt;
&lt;p&gt;Here's my talk about how reviewing code makes me a better programmer. You can also &lt;a href="http://www.slideshare.net/AmyHanlon/how-reviewing-code-makes-me-a-better-programmer"&gt;view my slides&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/MfKQGNUHaqs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="speaking"></category><category term="pygotham"></category><category term="code-review"></category></entry><entry><title>PyCon Recording: Investigating Python Wats</title><link href="http://amygdalama.github.io/pycon-recording-investigating-python-wats.html" rel="alternate"></link><updated>2015-04-18T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2015-04-18:pycon-recording-investigating-python-wats.html</id><summary type="html">&lt;p&gt;Many of us have experienced a "wat" in Python - some behavior that totally mystifies us. Here is my PyCon talk on Investigating Python Wats, where we uncover some surprising implementation details of CPython, some unexpected consequences of mutability, and details of scope and name resolution.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sH4XF6pKKmk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="speaking"></category><category term="pycon"></category><category term="python"></category><category term="wats"></category></entry></feed>