<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Amy Hanlon</title><link href="http://amygdalama.github.io/" rel="alternate"></link><link href="http://amygdalama.github.io/feeds/tags/python-internals.atom.xml" rel="self"></link><id>http://amygdalama.github.io/</id><updated>2014-04-25T00:00:00-04:00</updated><entry><title>Python Wats: Mutable Default Arguments</title><link href="http://amygdalama.github.io/python-wats-mutable-default-arguments.html" rel="alternate"></link><updated>2014-04-25T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-25:python-wats-mutable-default-arguments.html</id><summary type="html">&lt;p&gt;Let's look at a common Python &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;wat&lt;/a&gt; and try to figure out wat's actually happening!  &lt;/p&gt;
&lt;p&gt;We'll define a function, &lt;code&gt;foo&lt;/code&gt;, which takes one argument, &lt;code&gt;l&lt;/code&gt;, which has the default value of an empty list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens when we call &lt;code&gt;foo&lt;/code&gt; multiple times?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whoa! So mutating &lt;code&gt;l&lt;/code&gt; actually mutates it for all future calls to the function. Weird.&lt;/p&gt;
&lt;p&gt;This means that the &lt;code&gt;[]&lt;/code&gt; object is &lt;em&gt;only created once&lt;/em&gt;, and each time we call &lt;code&gt;foo&lt;/code&gt; without an argument, &lt;code&gt;l&lt;/code&gt; is referring to that same object. This may lead you to form a hypothesis: &lt;code&gt;l=[]&lt;/code&gt; is kind of like a name-binding statement that executes only once, when the function is defined. &lt;/p&gt;
&lt;p&gt;But, if that hypothesis is true, then how should we expect the following function to behave?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="cp"&gt;# ?&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="cp"&gt;# ?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, if &lt;code&gt;l=[]&lt;/code&gt; is &lt;em&gt;like a name-binding statement that executes only once&lt;/em&gt; when the function is defined, then I would expect something like this sequence of events to happen, when we define &lt;code&gt;bar&lt;/code&gt; and then call it twice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is defined&lt;ul&gt;
&lt;li&gt;the name &lt;code&gt;l&lt;/code&gt; is bound to the object &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called the first time:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; should return &lt;code&gt;{l : []}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then we reassign &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt; within the scope of &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; should return &lt;code&gt;['cat']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called again:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l=[]&lt;/code&gt; is not executed (based on our assumption)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; should either return &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;{l : ['cat']}&lt;/code&gt;, depending on if the assignment of &lt;code&gt;l = ['cat']&lt;/code&gt; persists after the function is called the first time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; should return &lt;code&gt;['cat']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What actually happens?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrm. This behavior reasonably leads us to believe that the assignment &lt;code&gt;l=[]&lt;/code&gt; happens &lt;em&gt;each time we call the function &lt;code&gt;bar&lt;/code&gt;&lt;/em&gt;. But in &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;l=[]&lt;/code&gt; can't be a statement that executes each time the function is called, or else we'd create a new &lt;code&gt;[]&lt;/code&gt; each time. &lt;/p&gt;
&lt;p&gt;If we assume &lt;code&gt;l=[]&lt;/code&gt; executes like a name-binding statement, then it must execute either (1) only once when the function is defined, or (2) each time the function is called. In &lt;code&gt;foo&lt;/code&gt;, it only executes once, but in &lt;code&gt;bar&lt;/code&gt;, it executes every time we call &lt;code&gt;bar&lt;/code&gt;. That just can't be. So our assumption that &lt;code&gt;l=[]&lt;/code&gt; executes like a name-binding statement leads to a contradiction, and thus must be wrong! &lt;/p&gt;
&lt;p&gt;Guess what, nerds! We kind of just did a &lt;a href="http://en.wikipedia.org/wiki/Proof_by_contradiction"&gt;proof by contradiction&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;So then what really happens when we define default values for arguments? Let's see if we can figure out where the default values are stored.&lt;/p&gt;
&lt;p&gt;My usual go-to for questions like this is Python internals whiz and Hacker School Facilitator &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, but you can also find the answer with a bit of &lt;a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=python%20mutable%20default%20arguments"&gt;googling&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So, without further ado, what actually happens when we define a default argument in Python 2.x is that the value of the argument gets stored inside the function's &lt;code&gt;func_defaults&lt;/code&gt; method. (In 3.x, the values are stored in the &lt;code&gt;__defaults__&lt;/code&gt; method.) &lt;/p&gt;
&lt;p&gt;Let's look back at the &lt;code&gt;foo&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python 2.x, we can access &lt;code&gt;foo&lt;/code&gt;'s &lt;code&gt;func_defaults&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! So the actual object that is being stored as the default for &lt;code&gt;foo&lt;/code&gt; is being modified when we call &lt;code&gt;foo&lt;/code&gt;! For fun, let's see if we can mutate the default value from outside of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dragon&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dragon&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dragon&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eep! That was fun. So what's in the &lt;code&gt;func_defaults&lt;/code&gt; of &lt;code&gt;bar&lt;/code&gt;? Recall:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt; 
&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay! So since &lt;code&gt;bar&lt;/code&gt; &lt;em&gt;reassigns&lt;/em&gt; &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt;, it doesn't modify the object stored in &lt;code&gt;func_defaults&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what have we learned?&lt;/p&gt;
&lt;p&gt;It appears as if the following happens when we define and call &lt;code&gt;bar&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is defined&lt;ul&gt;
&lt;li&gt;the object &lt;code&gt;[]&lt;/code&gt; is created and stored in the &lt;code&gt;func_defaults&lt;/code&gt; tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called the first time:&lt;ul&gt;
&lt;li&gt;since we didn't pass in a value for &lt;code&gt;l&lt;/code&gt; as an argument, Python looks in the &lt;code&gt;func_defaults&lt;/code&gt; for the value to bind to the name &lt;code&gt;l&lt;/code&gt;, and grabs the &lt;code&gt;[]&lt;/code&gt; object that we created when we defined &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; returns &lt;code&gt;{l : []}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we reassign &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;['cat']&lt;/code&gt; within the scope of &lt;code&gt;bar&lt;/code&gt;. Since this is a reassignment, this doesn't modify the &lt;code&gt;[]&lt;/code&gt; object contained in &lt;code&gt;func_defaults&lt;/code&gt;. Instead, &lt;code&gt;l&lt;/code&gt; is just bound to a different object in memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;['cat']&lt;/code&gt; is returned&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar&lt;/code&gt; is called again:&lt;ul&gt;
&lt;li&gt;since we didn't modify the &lt;code&gt;[]&lt;/code&gt; object the first time we called &lt;code&gt;bar&lt;/code&gt;, the same series of events happens as in step 2!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I should probably also mention something more useful: a common way of setting a default value to an empty list (and having it actually work as expected) is to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we call &lt;code&gt;baz&lt;/code&gt; multiple times, its behavior is more expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! Wat conquered. We should collect badges for all the wats we've battled.  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://maryrosecook.com/"&gt;Mary Rose Cook&lt;/a&gt; and &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, who valiantly battled this wat with me.&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category></entry><entry><title>Python Closures and Free Variables</title><link href="http://amygdalama.github.io/python-closures-and-free-variables.html" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-10:python-closures-and-free-variables.html</id><summary type="html">&lt;p&gt;Today, friends, we will continue to dissect functional programming concepts in Python. We're going to try to figure out what the hell is going on in this chunk of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens when we pass &lt;code&gt;make_contains_function&lt;/code&gt; a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a1e2cf8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get a function! Whoa. A function that returns a function. Cool. Let's assign this returned function a name and try to use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a1e2c80&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create a function called &lt;code&gt;contains_a&lt;/code&gt; by calling the &lt;code&gt;make_contains_function&lt;/code&gt; and passing the string &lt;code&gt;'a'&lt;/code&gt; as a parameter. Then, when we pass &lt;code&gt;contains_a&lt;/code&gt; a string, the function returns a boolean representing whether &lt;code&gt;'a'&lt;/code&gt; is in the string or not.&lt;/p&gt;
&lt;p&gt;Let's look at the original code again and try to understand what it does and why it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First let's translate this to English. We're creating a function called &lt;code&gt;make_contains_function&lt;/code&gt;, which takes one parameter, &lt;code&gt;x&lt;/code&gt;. In the body of the &lt;code&gt;make_contains_function&lt;/code&gt;, we create an inner function called &lt;code&gt;contains&lt;/code&gt;, which takes one parameter, &lt;code&gt;s&lt;/code&gt;. The inner function returns &lt;code&gt;x in s&lt;/code&gt;, and then the outer function returns the inner function.&lt;/p&gt;
&lt;p&gt;But how does &lt;code&gt;contains&lt;/code&gt; have access to &lt;code&gt;x&lt;/code&gt;? Shouldn't that throw a &lt;code&gt;NameError&lt;/code&gt;? Here's my mental model for how Python looks up the value associated with a name of a variable, &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;locals()&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;locals()&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;globals()&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;globals()&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check to see if &lt;code&gt;x&lt;/code&gt; is in the &lt;code&gt;__builtins__.__dict__&lt;/code&gt; dictionary. If it is, then the value of &lt;code&gt;x&lt;/code&gt; is the value associated with &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;__builtins__.__dict__&lt;/code&gt;. i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, throw a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My mental model for how &lt;code&gt;locals()&lt;/code&gt; works is that it returns all local variables, which are defined in the &lt;em&gt;most narrowly-defined&lt;/em&gt; current scope. In the case of &lt;code&gt;x&lt;/code&gt; in our example, the most narrowly-defined current scope is the function &lt;code&gt;contains&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; isn't assigned a value within the function &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;locals()&lt;/code&gt; won't contain a value for &lt;code&gt;x&lt;/code&gt; (based on my mental model). &lt;/p&gt;
&lt;p&gt;My model for how &lt;code&gt;globals()&lt;/code&gt; works is that it returns the variables which are defined at the module-level (i.e. variables which aren't defined within a scope like a function or a class. Since &lt;code&gt;x&lt;/code&gt; is defined within a function, namely within the &lt;code&gt;make_contains_function&lt;/code&gt;, it won't be included in the &lt;code&gt;globals()&lt;/code&gt; dictionary either.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is pretty clearly not defined in &lt;code&gt;__builtins__.__dict__&lt;/code&gt;, because it isn't defined in the &lt;code&gt;builtin&lt;/code&gt; module. (It isn't automatically imported any time you run Python).&lt;/p&gt;
&lt;p&gt;Poor &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So is my mental model correct? If it is, we should be getting a &lt;code&gt;NameError&lt;/code&gt; when we execute the &lt;code&gt;contains_a&lt;/code&gt; or &lt;code&gt;contains_b&lt;/code&gt; functions. Since we're not getting a &lt;code&gt;NameError&lt;/code&gt;, something about my mental model must be inaccurate. &lt;/p&gt;
&lt;p&gt;Shucks.&lt;/p&gt;
&lt;p&gt;Let's try printing the &lt;code&gt;locals()&lt;/code&gt; within each of the functions in our code block, to see where &lt;code&gt;x&lt;/code&gt; is defined: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Inside make_contains_function&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;locals(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;             &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Inside contains function&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;             &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;locals(): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If my mental model is correct, &lt;code&gt;x&lt;/code&gt; should be returned by &lt;code&gt;locals()&lt;/code&gt; within the &lt;code&gt;make_contains_function&lt;/code&gt;, but not by &lt;code&gt;locals()&lt;/code&gt; within the &lt;code&gt;contains&lt;/code&gt; function. Let's put my model to the test!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Inside&lt;/span&gt; &lt;span class="nx"&gt;make_contains_function&lt;/span&gt;
&lt;span class="nx"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contains_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Inside&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;span class="nx"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh! So &lt;code&gt;x&lt;/code&gt; is returned by &lt;code&gt;locals()&lt;/code&gt; inside the &lt;code&gt;contains&lt;/code&gt; function. That's why we don't get a &lt;code&gt;NameError&lt;/code&gt; when we try using &lt;code&gt;x&lt;/code&gt;. My mental model of how &lt;code&gt;locals()&lt;/code&gt; works and what it returns must be wrong. Let's look at the &lt;a href="https://docs.python.org/2/library/functions.html#locals"&gt;documentation&lt;/a&gt; for &lt;code&gt;locals()&lt;/code&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update and return a dictionary representing the current local symbol table. Free variables are returned by &lt;code&gt;locals()&lt;/code&gt; when it is called in function blocks but not in class blocks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hm. What is a "free variable"? Does that apply to our situation? I suspect it does. Either that or my definition of a local variable is wrong. Googling "python free variable" brings us to the trusty Python &lt;a href="https://docs.python.org/2/reference/executionmodel.html"&gt;Execution Model&lt;/a&gt; page, which I strongly believe every Python programmer should read and re-read often.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes visible to a code block is called the block's &lt;em&gt;environment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a &lt;em&gt;free variable&lt;/em&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's apply this information to our example, and list what we know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contains&lt;/code&gt; is a function.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is a free variable in &lt;code&gt;contains&lt;/code&gt;, because it is referenced in &lt;code&gt;contains&lt;/code&gt; but isn't defined there.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Free variables are not local variables.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, free variables are returned when calling &lt;code&gt;locals()&lt;/code&gt; within a function block.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Okay! When Python looks up the name &lt;code&gt;x&lt;/code&gt;, it finds a value for it in the &lt;code&gt;locals()&lt;/code&gt; dictionary, even though &lt;code&gt;x&lt;/code&gt; isn't a local variable. My mental model wasn't &lt;em&gt;too&lt;/em&gt; far off. I just need to adjust how I think about how &lt;code&gt;locals()&lt;/code&gt; behaves within functions.  &lt;/p&gt;
&lt;p&gt;And, so that you understand the title of this post, and so that you can sound smart around other programmers, you should know that a function that uses a &lt;em&gt;free variable&lt;/em&gt; is called a &lt;em&gt;closure&lt;/em&gt;. So, in our example, &lt;code&gt;x&lt;/code&gt; is a &lt;em&gt;free variable&lt;/em&gt; and the function &lt;code&gt;contains&lt;/code&gt; is a &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Credit to &lt;a href="https://twitter.com/ballingt"&gt;Tom Ballinger&lt;/a&gt; for the example code block and for intoducing me to &lt;a href="http://www.diveintopython3.net/"&gt;Dive Into Python3&lt;/a&gt;, an excellent read and the inspiration for this post.&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category><category term="functional programming"></category><category term="closures"></category></entry><entry><title>After Six Months of Learning The Python, I Can Finally Print "Hello World!"</title><link href="http://amygdalama.github.io/after-six-months-of-learning-the-python-i-can-finally-print-hello-world.html" rel="alternate"></link><updated>2014-04-01T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-04-01:after-six-months-of-learning-the-python-i-can-finally-print-hello-world.html</id><summary type="html">&lt;p&gt;I've been trying to learn how to write a function in the Python that prints two words, only two, "Hello World." I've been trying for six months. And today, friends, I've done it.&lt;/p&gt;
&lt;p&gt;I've read so many places that you can make print statements in the Python like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But where do you type this in? How do you tell the computer, the Python, the whatever, that you want it to take this sequence of characters, interpret it as code, and execute it?&lt;/p&gt;
&lt;p&gt;Well, I hope you are sitting down, because I've found the answer: the &lt;a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; statement (or function if you're into the Python 3)! &lt;/p&gt;
&lt;p&gt;Let's say you want the Python to execute the definition of a function like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can accomplish this by firing up the Python interpreter and typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def foo():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    print &amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; here takes in a string of the Python code and executes it! The &lt;code&gt;\n&lt;/code&gt; and the whitespace between the &lt;code&gt;\n&lt;/code&gt; and the &lt;code&gt;print&lt;/code&gt; statement are very important! The Python needs those to understand where the function ends.&lt;/p&gt;
&lt;p&gt;So now, we can see that &lt;code&gt;foo&lt;/code&gt; exists and is a function that prints "Hello World!"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;function foo at 0x10b611230&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; can also take in &lt;code&gt;code&lt;/code&gt; objects. We can make a &lt;code&gt;code&lt;/code&gt; object by using the &lt;a href="https://docs.python.org/2/library/functions.html#compile"&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;def bar():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    print &amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f88b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;compile&lt;/code&gt; takes in a string of code, a filename (we can just pass it the empty string), and a mode, which can be 'exec', 'eval', or 'single'.&lt;/p&gt;
&lt;p&gt;Let's pass &lt;code&gt;c&lt;/code&gt; into &lt;code&gt;exec&lt;/code&gt; to execute the code and define our &lt;code&gt;bar&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes! We did it again! This is a victorious day. &lt;/p&gt;
&lt;p&gt;Interestingly enough, functions themselves have &lt;code&gt;code&lt;/code&gt; objects assigned to them as attributes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object bar at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can overwrite these &lt;code&gt;code&lt;/code&gt; objects with our own &lt;code&gt;code&lt;/code&gt; objects! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;new_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;print &amp;#39;Hello, We Are Victorious Beings!&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;new_code&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_code&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;code object &amp;lt;module&amp;gt; at 0x10b5f81b0, file &amp;quot;&amp;quot;, line 1&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello, We Are Victorious Beings!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neat! We don't need the &lt;code&gt;"def bar():"&lt;/code&gt; part in the string we pass to &lt;code&gt;compile&lt;/code&gt; because at this point, &lt;code&gt;bar&lt;/code&gt; already exists and we're just overwriting the code in the body of the &lt;code&gt;bar&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Share in the comments if you know of any other ways to print statements in the Python!&lt;/p&gt;</summary><category term="python"></category><category term="python internals"></category><category term="hello world"></category><category term="hacker school"></category></entry><entry><title>A Love Affair With Broken Things</title><link href="http://amygdalama.github.io/a-love-affair-with-broken-things.html" rel="alternate"></link><updated>2014-03-31T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-31:a-love-affair-with-broken-things.html</id><summary type="html">&lt;p&gt;I love broken things, unfinished things, breaking things, unfinishing things. Broken and unfinished things allow you to see the process in which they were created; their most intimate secrets are exposed.&lt;/p&gt;
&lt;h2&gt;Broken Statues&lt;/h2&gt;
&lt;p&gt;A week ago, inside &lt;a href="http://www.metmuseum.org/en"&gt;The Metropolitan Museum of Art&lt;/a&gt;, my love for broken things was realized. Just &lt;em&gt;look&lt;/em&gt; at these. They're so &lt;em&gt;naked, vulnerable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some ladies, broken" src="/images/broken_ladies.JPG" title="broken ladies" /&gt;
&lt;img alt="a face, broken" src="/images/broken_face.JPG" title="broken face" /&gt;
&lt;img alt="a torso, broken" src="/images/broken_torso.JPG" title="broken torso" /&gt;&lt;/p&gt;
&lt;p&gt;Okay so some of them are literally naked, but you get the point. When a statue is broken, you can sneak a peek inside! You get so many clues about how it was made! Is it hollow? What's it made out of? Is the material on the outside the same as the inside? Does it have a frame?&lt;/p&gt;
&lt;h2&gt;Breaking Code&lt;/h2&gt;
&lt;p&gt;While I can't bring myself to break art to get clues about the process of its creation, I &lt;em&gt;can&lt;/em&gt; break code! Breaking code is free and doesn't hurt anyone! (As long as you keep it local...) I do this quite a bit as a method of learning - removing the pieces of code that you don't understand reveals the purpose of those pieces. It's like removing the arm of a statue to look inside.&lt;/p&gt;
&lt;p&gt;Let's look at some code from Mary Rose Cook's functional programming &lt;a href="http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming"&gt;tutorial&lt;/a&gt; (which is amazing, and you should absolutely read it and do the exercises and spend time understanding it completely if you're at all interested in functional programming). We won't understand the code at first (or at least &lt;em&gt;I&lt;/em&gt; won't), but we'll take apart the pieces of the code in an attempt to better understand their purpose.&lt;/p&gt;
&lt;p&gt;Mary aptly explains what Python's builtin &lt;code&gt;map&lt;/code&gt; function does:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Map takes a function and a collection of items. It makes a new, empty collection, runs the function on each item in the original collection and inserts each return value into the new collection. It returns the new collection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Her first example for showing how &lt;code&gt;map&lt;/code&gt; works is fairly straightforward:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a simple map that takes a list of names and returns a list of the lengths of those names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;name_lengths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Isla&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name_lengths&lt;/span&gt;
&lt;span class="cp"&gt;# =&amp;gt; [4, 4, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;In the second example of &lt;code&gt;map&lt;/code&gt;, we see that Mary uses a &lt;code&gt;lambda&lt;/code&gt; function: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a map that squares every number in the passed collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="cp"&gt;# =&amp;gt; [0, 1, 4, 9, 16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This map doesn’t take a named function. It takes an anonymous, inlined function defined with lambda. The parameters of the lambda are defined to the left of the colon. The function body is defined to the right of the colon. The result of running the function body is (implicitly) returned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But &lt;em&gt;why&lt;/em&gt; does Mary use a &lt;code&gt;lambda&lt;/code&gt; function here? Let's spend some time breaking this code and reconstructing it to understand why the &lt;code&gt;lambda&lt;/code&gt; function is used.&lt;/p&gt;
&lt;p&gt;First let's try removing the &lt;code&gt;lambda&lt;/code&gt; and seeing what happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
Traceback (most recent call last):
  File &amp;quot;&lt;span class="nt"&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&amp;quot;, line 1, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
NameError: name &amp;#39;x&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay. &lt;code&gt;x&lt;/code&gt; is not defined. That makes sense, because &lt;code&gt;x&lt;/code&gt; isn't in our &lt;code&gt;locals&lt;/code&gt; or our &lt;code&gt;globals&lt;/code&gt; or our &lt;code&gt;builtins&lt;/code&gt;. Remember that when Python sees the name of a variable, it looks in those three places for a definition of that variable. If Python doesn't find the variable in any of those places, it throws a &lt;code&gt;NameError&lt;/code&gt;. &lt;code&gt;lambda&lt;/code&gt; must temporarily add variables (here, &lt;code&gt;x&lt;/code&gt;) to our namespace and then throw them away.&lt;/p&gt;
&lt;p&gt;We removed the arm of the statue and a &lt;code&gt;NameError&lt;/code&gt; was revealed. Cool. Now let's try naively reconstructing the statue.&lt;/p&gt;
&lt;p&gt;What if we tried using the &lt;code&gt;**&lt;/code&gt; operator? Can we pass something like &lt;code&gt;**2&lt;/code&gt; as the function for &lt;code&gt;map&lt;/code&gt;? Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
  File &amp;quot;&lt;span class="nt"&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&amp;quot;, line 1
    squares = map(**2, &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
                    ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;SyntaxError&lt;/code&gt; makes me think that &lt;code&gt;**&lt;/code&gt; is part of a statement, defined in Python's Grammar file, and the way that we typed our code is in violation of the the definition of that statement.&lt;/p&gt;
&lt;p&gt;I am going to cheat a bit here. I am going to present something I found on the internet that helps us understand this &lt;code&gt;SyntaxError&lt;/code&gt; without showing how I knew what to google to get the answer. At some point I'll write about, given a &lt;code&gt;SyntaxError&lt;/code&gt;, how we can find the relevant rules defined in Python's Grammar, understand which rules we're violating, and adjust our code to obey. But not today.&lt;/p&gt;
&lt;p&gt;So the short story is I did some research to figure out how &lt;code&gt;**&lt;/code&gt; Python operators are &lt;a href="https://docs.python.org/2/reference/expressions.html#the-power-operator"&gt;defined&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;**&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;u_expr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important thing to note is that any time Python sees &lt;code&gt;**&lt;/code&gt; in this context, it expects a thing called a &lt;a href="https://docs.python.org/2/reference/expressions.html#primaries"&gt;&lt;code&gt;primary&lt;/code&gt;&lt;/a&gt; to come before it and a thing called a &lt;a href="https://docs.python.org/2/reference/expressions.html#unary-arithmetic-and-bitwise-operations"&gt;&lt;code&gt;u_expr&lt;/code&gt;&lt;/a&gt; to come after it. We can tell we violated this rule without even understanding what a &lt;code&gt;primary&lt;/code&gt; or a &lt;code&gt;u_expr&lt;/code&gt; is. We tried typing &lt;code&gt;**2&lt;/code&gt;, which doesn't include anything that could be interpreted as a &lt;code&gt;primary&lt;/code&gt; before the &lt;code&gt;**&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Okay. So we can't reconstruct Mary's function using &lt;code&gt;**&lt;/code&gt; instead of &lt;code&gt;lambda&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;What else could we try instead of a lambda function? Is there a function already defined in Python that does the same thing as the operator &lt;code&gt;**&lt;/code&gt; but in function syntax?&lt;/p&gt;
&lt;p&gt;Let's &lt;a href="https://www.google.com/search?q=python+power+operator+function&amp;amp;oq=python+power+operator+function&amp;amp;aqs=chrome..69i57.426j0j1&amp;amp;sourceid=chrome&amp;amp;espv=210&amp;amp;es_sm=91&amp;amp;ie=UTF-8"&gt;google&lt;/a&gt; "python power operator function." We quickly discover that there's a builtin &lt;code&gt;pow&lt;/code&gt; function that takes two parameters, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and returns &lt;code&gt;x**y&lt;/code&gt;. Cool! So &lt;code&gt;pow(x,2)&lt;/code&gt; should return the same thing as &lt;code&gt;x**2&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Does the &lt;code&gt;pow&lt;/code&gt; function work in our &lt;code&gt;map&lt;/code&gt; function? Let's try!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
Traceback (most recent call last):
  File &amp;quot;&lt;span class="nt"&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&amp;quot;, line 1, in &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
TypeError: pow expected at least 2 arguments, got 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, right. Derp. We need to pass &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;pow&lt;/code&gt;, in addition to each element in our list. In the &lt;a href="https://docs.python.org/2.7/library/functions.html#map"&gt;documentation&lt;/a&gt; for &lt;code&gt;map&lt;/code&gt;, we see that if the function takes two arguments, we need to pass it two iterables. So we could do something kind of dumb like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works, but it's pretty ugly compared to the original:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It seems silly to use a function, &lt;code&gt;pow&lt;/code&gt;, that takes two arguments, when one of the arguments we pass it is always the same. &lt;/p&gt;
&lt;p&gt;Ohhh. &lt;/p&gt;
&lt;p&gt;Maybe that's why Mary used &lt;code&gt;lambda&lt;/code&gt;! To create a function that works kind of like &lt;code&gt;pow&lt;/code&gt; but just takes one argument! &lt;/p&gt;
&lt;p&gt;So we broke the statue, attempted to reconstruct it, and then wound up with something way uglier than the original. And thus, through breaking Mary's code, her design decisions were revealed! And now we have a better understanding of why the original process was used!&lt;/p&gt;
&lt;p&gt;Breaking things is fucking rad.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post is not intended to show the most pythonic way of squaring a list of integers. Instead, it is intended to show that we can discover how and why a code block works by exploring what happens when we remove chunks of it.&lt;/p&gt;</summary><category term="learning"></category><category term="hacker school"></category><category term="python"></category><category term="functional programming"></category><category term="map"></category><category term="lambda"></category><category term="python internals"></category><category term="grammar"></category></entry><entry><title>What's the deal with __builtins__ vs __builtin__</title><link href="http://amygdalama.github.io/whats-the-deal-with-builtins-vs-builtin.html" rel="alternate"></link><updated>2014-03-23T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-23:whats-the-deal-with-builtins-vs-builtin.html</id><summary type="html">&lt;p&gt;Seriously, what's the difference? When you first fire up the Python interpreter, &lt;code&gt;__builtins__&lt;/code&gt; is in your namespace for free:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;__builtins__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__package__&amp;#39;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;module &amp;#39;__builtin__&amp;#39; (built-in)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it appears to be the &lt;code&gt;__builtin__&lt;/code&gt; module (singular)! If you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrm. So they are both names that point to the same object, the module &lt;code&gt;__builtin__&lt;/code&gt;. Weird. Why does Python do this? Do they always behave the same?&lt;/p&gt;
&lt;p&gt;I read on &lt;a href="http://stackoverflow.com/questions/11181519/python-whats-the-difference-between-builtin-and-builtins"&gt;StackOverflow&lt;/a&gt; that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, when in the &lt;code&gt;__main__&lt;/code&gt; module, &lt;code&gt;__builtins__&lt;/code&gt; is the built-in module &lt;code&gt;__builtin__&lt;/code&gt; (note: no 's'); when in any other module, &lt;code&gt;__builtins__&lt;/code&gt; is an alias for the dictionary of the &lt;code&gt;__builtin__&lt;/code&gt; module itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What. What does that mean. &lt;/p&gt;
&lt;p&gt;This talk of the "&lt;code&gt;__main__&lt;/code&gt; module" and "any other module" reminds me of a sequence of words that I've known for quite a while, but haven't completely grokked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can access the name of the current module with the builtin variable &lt;code&gt;__name__&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You're probably familiar with the related canonical statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what does "current module" mean? What does the &lt;code&gt;__name__&lt;/code&gt; variable look like when it does not equal &lt;code&gt;__main__&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I happen to know, because I've obsessively read about the &lt;code&gt;import&lt;/code&gt; statement, another sequence of words: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any code executed as a result of an &lt;code&gt;import&lt;/code&gt; isn't executed in the &lt;code&gt;__main__&lt;/code&gt; module. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's use these bits of knowledge to observe the behavior of &lt;code&gt;__builtins__&lt;/code&gt; both inside and outside of the &lt;code&gt;__main__&lt;/code&gt; module. We can also check out the &lt;code&gt;__name__&lt;/code&gt; variable while we're at it.&lt;/p&gt;
&lt;p&gt;First, let's make a script, &lt;code&gt;a.py&lt;/code&gt;, which will allow us to observe the behavior of &lt;code&gt;__builtin__&lt;/code&gt;, &lt;code&gt;__builtins__&lt;/code&gt;, and &lt;code&gt;__name__&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;In a&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__name__ is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtin__ is __builtins__:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtin__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtins__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see what happens when we execute &lt;code&gt;a.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python a.py
&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay. So we're in the &lt;code&gt;__main__&lt;/code&gt; module, and in here &lt;code&gt;__builtin__&lt;/code&gt; is pointing to the same module object as &lt;code&gt;__builtins__&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;What happens if we &lt;code&gt;import a&lt;/code&gt; in another script? The code in &lt;code&gt;a&lt;/code&gt; will execute, but it won't be executed within the &lt;code&gt;__main__&lt;/code&gt; module. Instead, it'll be executed within the &lt;code&gt;a&lt;/code&gt; module. Let's write another script, &lt;code&gt;b.py&lt;/code&gt;, to find out what happens to &lt;code&gt;__builtins__&lt;/code&gt; outside of &lt;code&gt;__main__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__builtin__&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;In b, before importing a&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# the output from this should be the same as when we ran&lt;/span&gt;
&lt;span class="c"&gt;# $ python a.py&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__name__ is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtin__ is __builtins__:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtin__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;type(__builtins__):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt;
&lt;span class="c"&gt;# code from a will execute here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see what happens when we run &lt;code&gt;b.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python b.py
&lt;span class="go"&gt;In b, before importing a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;


&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: a&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: False&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha. So when we're outside the context of the &lt;code&gt;__main__&lt;/code&gt; module, &lt;code&gt;__name__&lt;/code&gt; is just equal to the name of the module where code is currently being executed. That seems logical. And outside of &lt;code&gt;__main__&lt;/code&gt;, &lt;code&gt;__builtins__&lt;/code&gt; is a dict, rather than a module. &lt;/p&gt;
&lt;p&gt;We were told earlier that, outside the context of &lt;code&gt;__main__&lt;/code&gt;, &lt;em&gt;"&lt;code&gt;__builtins__&lt;/code&gt; is an alias for the dictionary of the &lt;code&gt;__builtin__&lt;/code&gt; module"&lt;/em&gt;. I think that means that &lt;code&gt;__builtins__ is __builtin__.__dict__&lt;/code&gt;. Let's see if my hypothesis is true, by adding another line to the bottom of our &lt;code&gt;a.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__builtins__ is __builtin__.__dict__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;__builtin__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;b.py&lt;/code&gt; again, we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python b.py
&lt;span class="go"&gt;In b, before importing a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: __main__&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: True&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;


&lt;span class="go"&gt;In a&lt;/span&gt;
&lt;span class="go"&gt;__name__ is: a&lt;/span&gt;
&lt;span class="go"&gt;__builtin__ is __builtins__: False&lt;/span&gt;
&lt;span class="go"&gt;type(__builtin__): &amp;lt;type &amp;#39;module&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;type(__builtins__): &amp;lt;type &amp;#39;dict&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;__builtins__ is __builtin__.__dict__ True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes! My hypothesis was correct. Okay. So now I get why using &lt;code&gt;__builtin__&lt;/code&gt; is better than &lt;code&gt;__builtins__&lt;/code&gt;: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The type, and thus behavior, of &lt;code&gt;__builtins__&lt;/code&gt; changes based on the context of where it's being executed, while the type and behavior of &lt;code&gt;__builtin__&lt;/code&gt; is constant. Rad.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks, stranger who &lt;a href="https://github.com/amygdalama/nagini/issues/1"&gt;suggested&lt;/a&gt; I look into this, for the learning opportunity. And thanks, always, to Allison Kaptur, for exploring this topic with me.&lt;/p&gt;
&lt;p&gt;The code for this blog post is on &lt;a href="https://github.com/amygdalama/builtins"&gt;GitHub&lt;/a&gt;, of course.&lt;/p&gt;</summary><category term="python"></category><category term="builtins"></category><category term="hacker school"></category><category term="python internals"></category></entry><entry><title>Replacing `import` with `accio`: A Dive into Bootstrapping and Python's Grammar</title><link href="http://amygdalama.github.io/import-accio-bootstrapping-python-grammar.html" rel="alternate"></link><updated>2014-03-14T00:00:00-04:00</updated><author><name>Amy Hanlon</name></author><id>tag:amygdalama.github.io,2014-03-14:import-accio-bootstrapping-python-grammar.html</id><summary type="html">&lt;p&gt;At &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;, I've been building an alternate universe Python by overwriting builtin functions and statements with Harry Potter spells. This is a thing you can do at Hacker School!&lt;/p&gt;
&lt;p&gt;Although this project started as a joke, I've quickly descended so deeply into Python internals that I've, with the guidance of the fabulous Hacker School facilitator &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;, made edits to the CPython source code, and compiled a Python to compile a Python. All to replace the &lt;code&gt;import&lt;/code&gt; statement with &lt;code&gt;accio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But before we get into compiling the Harry Potter Python I lovingly call Nagini, let's first talk about some Python internals basics, with spells as examples, of course.&lt;/p&gt;
&lt;h1&gt;Overwriting Builtin Functions&lt;/h1&gt;
&lt;p&gt;Python builtin functions are stored in a module called &lt;code&gt;__builtins__&lt;/code&gt; that's automatically imported on startup. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; dir(__builtins__)
[&amp;#39;ArithmeticError&amp;#39;, &amp;#39;AssertionError&amp;#39;, &amp;#39;AttributeError&amp;#39;, &amp;#39;BaseException&amp;#39;, &amp;#39;BufferError&amp;#39;, &amp;#39;BytesWarning&amp;#39;, &amp;#39;DeprecationWarning&amp;#39;, &amp;#39;EOFError&amp;#39;, &amp;#39;Ellipsis&amp;#39;, &amp;#39;EnvironmentError&amp;#39;, &amp;#39;Exception&amp;#39;, &amp;#39;False&amp;#39;, &amp;#39;FloatingPointError&amp;#39;, &amp;#39;FutureWarning&amp;#39;, &amp;#39;GeneratorExit&amp;#39;, &amp;#39;IOError&amp;#39;, &amp;#39;ImportError&amp;#39;, &amp;#39;ImportWarning&amp;#39;, &amp;#39;IndentationError&amp;#39;, &amp;#39;IndexError&amp;#39;, &amp;#39;KeyError&amp;#39;, &amp;#39;KeyboardInterrupt&amp;#39;, &amp;#39;LookupError&amp;#39;, &amp;#39;MemoryError&amp;#39;, &amp;#39;NameError&amp;#39;, &amp;#39;None&amp;#39;, &amp;#39;NotImplemented&amp;#39;, &amp;#39;NotImplementedError&amp;#39;, &amp;#39;OSError&amp;#39;, &amp;#39;OverflowError&amp;#39;, &amp;#39;PendingDeprecationWarning&amp;#39;, &amp;#39;ReferenceError&amp;#39;, &amp;#39;RuntimeError&amp;#39;, &amp;#39;RuntimeWarning&amp;#39;, &amp;#39;StandardError&amp;#39;, &amp;#39;StopIteration&amp;#39;, &amp;#39;SyntaxError&amp;#39;, &amp;#39;SyntaxWarning&amp;#39;, &amp;#39;SystemError&amp;#39;, &amp;#39;SystemExit&amp;#39;, &amp;#39;TabError&amp;#39;, &amp;#39;True&amp;#39;, &amp;#39;TypeError&amp;#39;, &amp;#39;UnboundLocalError&amp;#39;, &amp;#39;UnicodeDecodeError&amp;#39;, &amp;#39;UnicodeEncodeError&amp;#39;, &amp;#39;UnicodeError&amp;#39;, &amp;#39;UnicodeTranslateError&amp;#39;, &amp;#39;UnicodeWarning&amp;#39;, &amp;#39;UserWarning&amp;#39;, &amp;#39;ValueError&amp;#39;, &amp;#39;Warning&amp;#39;, &amp;#39;ZeroDivisionError&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;__debug__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__import__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;abs&amp;#39;, &amp;#39;all&amp;#39;, &amp;#39;any&amp;#39;, &amp;#39;apply&amp;#39;, &amp;#39;basestring&amp;#39;, &amp;#39;bin&amp;#39;, &amp;#39;bool&amp;#39;, &amp;#39;buffer&amp;#39;, &amp;#39;bytearray&amp;#39;, &amp;#39;bytes&amp;#39;, &amp;#39;callable&amp;#39;, &amp;#39;chr&amp;#39;, &amp;#39;classmethod&amp;#39;, &amp;#39;cmp&amp;#39;, &amp;#39;coerce&amp;#39;, &amp;#39;compile&amp;#39;, &amp;#39;complex&amp;#39;, &amp;#39;copyright&amp;#39;, &amp;#39;credits&amp;#39;, &amp;#39;delattr&amp;#39;, &amp;#39;dict&amp;#39;, &amp;#39;dir&amp;#39;, &amp;#39;divmod&amp;#39;, &amp;#39;enumerate&amp;#39;, &amp;#39;eval&amp;#39;, &amp;#39;execfile&amp;#39;, &amp;#39;exit&amp;#39;, &amp;#39;file&amp;#39;, &amp;#39;filter&amp;#39;, &amp;#39;float&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;frozenset&amp;#39;, &amp;#39;getattr&amp;#39;, &amp;#39;globals&amp;#39;, &amp;#39;hasattr&amp;#39;, &amp;#39;hash&amp;#39;, &amp;#39;help&amp;#39;, &amp;#39;hex&amp;#39;, &amp;#39;id&amp;#39;, &amp;#39;input&amp;#39;, &amp;#39;int&amp;#39;, &amp;#39;intern&amp;#39;, &amp;#39;isinstance&amp;#39;, &amp;#39;issubclass&amp;#39;, &amp;#39;iter&amp;#39;, &amp;#39;len&amp;#39;, &amp;#39;license&amp;#39;, &amp;#39;list&amp;#39;, &amp;#39;locals&amp;#39;, &amp;#39;long&amp;#39;, &amp;#39;map&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;memoryview&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;next&amp;#39;, &amp;#39;object&amp;#39;, &amp;#39;oct&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;ord&amp;#39;, &amp;#39;pow&amp;#39;, &amp;#39;print&amp;#39;, &amp;#39;property&amp;#39;, &amp;#39;quit&amp;#39;, &amp;#39;range&amp;#39;, &amp;#39;raw_input&amp;#39;, &amp;#39;reduce&amp;#39;, &amp;#39;reload&amp;#39;, &amp;#39;repr&amp;#39;, &amp;#39;reversed&amp;#39;, &amp;#39;round&amp;#39;, &amp;#39;set&amp;#39;, &amp;#39;setattr&amp;#39;, &amp;#39;slice&amp;#39;, &amp;#39;sorted&amp;#39;, &amp;#39;staticmethod&amp;#39;, &amp;#39;str&amp;#39;, &amp;#39;sum&amp;#39;, &amp;#39;super&amp;#39;, &amp;#39;tuple&amp;#39;, &amp;#39;type&amp;#39;, &amp;#39;unichr&amp;#39;, &amp;#39;unicode&amp;#39;, &amp;#39;vars&amp;#39;, &amp;#39;xrange&amp;#39;, &amp;#39;zip&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Overwriting Python builtins is surprisingly easy! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; wingardium_leviosa = __builtins__.float

&amp;gt;&amp;gt;&amp;gt; del __builtins__.float

&amp;gt;&amp;gt;&amp;gt; float(3)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;float&amp;#39; is not defined

&amp;gt;&amp;gt;&amp;gt; wingardium_leviosa(3)
3.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, overwriting &lt;code&gt;import&lt;/code&gt; is not so easy. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio = import
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    accio = import
                 ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python is expecting the name of a module after &lt;code&gt;import&lt;/code&gt;, and thus it throws a &lt;code&gt;SyntaxError&lt;/code&gt;. This is an effect of &lt;code&gt;import x&lt;/code&gt; being a &lt;em&gt;statement&lt;/em&gt;, rather than a &lt;em&gt;function&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Hm. I remember seeing the function &lt;code&gt;__import__&lt;/code&gt; listed when we ran &lt;code&gt;dir(__builtins__)&lt;/code&gt;. Maybe we can overwrite that instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio = __builtins__.__import__
&amp;gt;&amp;gt;&amp;gt; accio sys
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    accio sys
            ^
SyntaxError: invalid syntax

# :(
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if we tried calling &lt;code&gt;accio&lt;/code&gt; like a function?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio(sys)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;sys&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe we need to pass 'sys' as a string?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; accio(&amp;#39;sys&amp;#39;)
&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;

# Ooh!

&amp;gt;&amp;gt;&amp;gt; sys = accio(&amp;#39;sys&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; sys
&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha. So the statement &lt;code&gt;import x&lt;/code&gt; probably does something like:&lt;br /&gt;
    1. call the &lt;code&gt;__import__&lt;/code&gt; function on &lt;code&gt;x&lt;/code&gt;: &lt;code&gt;__builtins__.__import__('x')&lt;/code&gt;&lt;br /&gt;
    2. assign the name &lt;code&gt;x&lt;/code&gt; to the module returned by &lt;code&gt;__import__&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;And &lt;code&gt;import sys&lt;/code&gt; is like shorthand for the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; sys = __builtins__.__import__(&amp;#39;sys&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Here I'm only describing simple &lt;code&gt;import&lt;/code&gt; statements, but more complex statements like &lt;code&gt;from x import y.w, y.z&lt;/code&gt; work similarly.)&lt;/p&gt;
&lt;p&gt;So we have a way to add &lt;code&gt;accio&lt;/code&gt; as a function, but not as a statement. I'm unsatisfied. &lt;/p&gt;
&lt;p&gt;For fun, can we delete import?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; del import
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    del import
             ^
SyntaxError: invalid syntax

&amp;gt;&amp;gt;&amp;gt; del __builtins__.__import__
&amp;gt;&amp;gt;&amp;gt; import os
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ImportError: __import__ not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kind of! Although I want &lt;code&gt;import os&lt;/code&gt; to be a &lt;code&gt;SyntaxError&lt;/code&gt; rather than an &lt;code&gt;ImportError&lt;/code&gt; because clearly &lt;code&gt;import&lt;/code&gt; is the wrong thing to type and the user should know to type &lt;code&gt;accio&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;So, to completely overwrite &lt;code&gt;import&lt;/code&gt; with &lt;code&gt;accio&lt;/code&gt;, we'll need to learn where Python defines statements.&lt;/p&gt;
&lt;h1&gt;Grammar&lt;/h1&gt;
&lt;p&gt;Eli Bendersky wrote a great &lt;a href="http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/"&gt;blog post&lt;/a&gt; about adding an &lt;code&gt;until&lt;/code&gt; statement to Python. Since we want to &lt;em&gt;replace&lt;/em&gt; a statement, rather than add one, our method will be a bit different.&lt;/p&gt;
&lt;p&gt;Regardless, it looks like the place to start for changing Python's statements is in the &lt;code&gt;Grammar&lt;/code&gt; file in the Python &lt;a href="http://docs.python.org/devguide/setup.html"&gt;source code&lt;/a&gt;. &lt;strong&gt;Python source code!&lt;/strong&gt; Isn't this &lt;em&gt;fun?!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Python's source code is stored in a Mercurial repository, so first we'll have to install Mercurial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can clone CPython (like &lt;code&gt;git clone&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone http://hg.python.org/cpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take a whole minute. Grab a coffee.&lt;/p&gt;
&lt;p&gt;In the Python Mercurial repo, different versions of Python have different branches. By default we're on a Python3 branch. I'm still running Python2 on my machine, so let's checkout version 2.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;cpython
&lt;span class="nv"&gt;$ &lt;/span&gt;hg checkout 2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's &lt;a href="http://docs.python.org/devguide/setup.html"&gt;compile CPython&lt;/a&gt; and see if it works!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --with-pydebug
&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I get a warning message saying some modules were unable to be built, but I am unstoppable. We are unstoppable. Let's continue.&lt;/p&gt;
&lt;p&gt;It seems like the place to start is in the file &lt;code&gt;Grammar/Grammar&lt;/code&gt;, so let's start poking around there. &lt;a href="http://docs.python.org/2/reference/grammar.html"&gt;This&lt;/a&gt; is what it looks like. Searching for 'import' brings us to lines 52-60:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_stmt: import_name | import_from
import_name: &amp;#39;import&amp;#39; dotted_as_names
import_from: (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;import&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names))
import_as_name: NAME [&amp;#39;as&amp;#39; NAME]
dotted_as_name: dotted_name [&amp;#39;as&amp;#39; NAME]
import_as_names: import_as_name (&amp;#39;,&amp;#39; import_as_name)* [&amp;#39;,&amp;#39;]
dotted_as_names: dotted_as_name (&amp;#39;,&amp;#39; dotted_as_name)*
dotted_name: NAME (&amp;#39;.&amp;#39; NAME)*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! We can kind of understand what's going on here just from reading. It looks like an &lt;code&gt;import_stmt&lt;/code&gt; is either an &lt;code&gt;import_name&lt;/code&gt; or an &lt;code&gt;import_from&lt;/code&gt; which have the format &lt;code&gt;import x&lt;/code&gt; and &lt;code&gt;from x import y&lt;/code&gt;, respectively. What happens if we just change 'import' to 'accio' in lines 53 and 55? Let's try it. After making the change and saving the &lt;code&gt;Grammar&lt;/code&gt; file, type the following command to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ach. If only it was that easy. This throws an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;151&lt;/span&gt;, in &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_module_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/runpy.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;113&lt;/span&gt;, in &lt;span class="n"&gt;_get_module_details&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/pkgutil.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;283&lt;/span&gt;, in &lt;span class="n"&gt;get_code&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/Users/amyhanlon/projects/nagini/cpython/Lib/sysconfig.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;4&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This error occurs while trying to execute a Python script! Compiling CPython requires running Python scripts! Interesting. Maybe at this point we remember that Python is &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(compilers)"&gt;bootstrapped&lt;/a&gt;. We look back at the &lt;a href="http://docs.python.org/devguide/setup.html"&gt;Python Developer's Guide&lt;/a&gt; and we find that &lt;em&gt;"Vast areas of CPython are written completely in Python: as of this writing, CPython contains slightly more Python code than C."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So then we wonder - when CPython is compiling, does it execute Python scripts with the Python that's currently being compiled? Or does it use another already-compiled muggle Python, like our environment Python? If it uses the Python that's currently being compiled, we'll need to change these .py scripts to say &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Otherwise, what do we do? Our muggle Python only understands &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;...&lt;/p&gt;
&lt;p&gt;Let's look into one of the .py scripts within &lt;code&gt;Lib&lt;/code&gt; to investigate. Here's the first line of the &lt;code&gt;Lib/keyword.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#! /usr/bin/env python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha! This script is executed via our environment Python! Our environment Python only understands &lt;code&gt;import&lt;/code&gt;. So &lt;code&gt;keyword.py&lt;/code&gt; needs to have &lt;code&gt;import&lt;/code&gt; and not &lt;code&gt;accio&lt;/code&gt;. However, since we got a &lt;code&gt;SyntaxError&lt;/code&gt; on an &lt;code&gt;import&lt;/code&gt; statement, that must mean that at least sometimes during the process of compiling we're required to use &lt;code&gt;accio&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;. Hrm... Any ideas?&lt;/p&gt;
&lt;h1&gt;Yo Dawg, I Heard You Like Pythons&lt;/h1&gt;
&lt;p&gt;What if we did something crazy like compiled an intermediary Python that understands &lt;em&gt;both&lt;/em&gt; &lt;code&gt;accio&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;import&lt;/code&gt;, and used &lt;em&gt;that&lt;/em&gt; Python to compile &lt;em&gt;another&lt;/em&gt; Python that only understands &lt;code&gt;accio&lt;/code&gt;? (Full credit for this idea goes to &lt;a href="http://akaptur.github.io/"&gt;Allison Kaptur&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So, for our intermediary Python we'll need to edit the &lt;code&gt;Grammar&lt;/code&gt; file like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_name: &amp;#39;import&amp;#39; dotted_as_names | &amp;#39;accio&amp;#39; dotted_as_names
import_from: ((&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;import&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names)) |
              (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;accio&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names)))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus this Python should understand both &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;accio&lt;/code&gt;. Let's compile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eep! No errors! Just the warning about missing modules that we also received before we made any changes! Now we need to prepend our $PATH so that this Python will become our environment Python (but only for this terminal session). That way this intermediary Python will be used to compile our final Python. Let's make a symlink to the &lt;code&gt;python.exe&lt;/code&gt; that was created when we ran &lt;code&gt;make&lt;/code&gt;, and then add the path to that symlink to our $PATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll need to duplicate this entire &lt;code&gt;cpython&lt;/code&gt; directory and make our final Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../
&lt;span class="nv"&gt;$ &lt;/span&gt;cp -r cpython nagini-python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;nagini-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to change the &lt;code&gt;Grammar&lt;/code&gt; file for this Python to only allow &lt;code&gt;accio&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import_name: &amp;#39;accio&amp;#39; dotted_as_names
import_from: (&amp;#39;from&amp;#39; (&amp;#39;.&amp;#39;* dotted_name | &amp;#39;.&amp;#39;+)
              &amp;#39;accio&amp;#39; (&amp;#39;*&amp;#39; | &amp;#39;(&amp;#39; import_as_names &amp;#39;)&amp;#39; | import_as_names))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we want to replace every instance of &lt;code&gt;import&lt;/code&gt; in every .py file to &lt;code&gt;accio&lt;/code&gt;. We'll use a blackbox bash command to accomplish that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="sb"&gt;`&lt;/span&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;sed -i &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/[[:&amp;lt;:]]import[[:&amp;gt;:]]/accio/g&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we just need to compile this new Python!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -s -j2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's make a symlink to this Python...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir bin
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bin
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ../python.exe python
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And fire it up...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; import sys&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
             &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="gr"&gt;SyntaxError&lt;/span&gt;: &lt;span class="n"&gt;invalid syntax&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; accio sys&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;&amp;gt;&amp;gt; sys.modules.keys()&lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;copy_reg&amp;#39;, &amp;#39;sre_compile&amp;#39;, &amp;#39;_sre&amp;#39;, &amp;#39;encodings&amp;#39;, &amp;#39;site&amp;#39;, &amp;#39;__builtin__&amp;#39;, &amp;#39;sysconfig&amp;#39;, &amp;#39;__main__&amp;#39;, &amp;#39;encodings.encodings&amp;#39;, &amp;#39;abc&amp;#39;, &amp;#39;posixpath&amp;#39;, &amp;#39;_weakrefset&amp;#39;, &amp;#39;errno&amp;#39;, &amp;#39;encodings.codecs&amp;#39;, &amp;#39;sre_constants&amp;#39;, &amp;#39;re&amp;#39;, &amp;#39;_abcoll&amp;#39;, &amp;#39;types&amp;#39;, &amp;#39;_codecs&amp;#39;, &amp;#39;encodings.__builtin__&amp;#39;, &amp;#39;_warnings&amp;#39;, &amp;#39;genericpath&amp;#39;, &amp;#39;stat&amp;#39;, &amp;#39;zipimport&amp;#39;, &amp;#39;_sysconfigdata&amp;#39;, &amp;#39;warnings&amp;#39;, &amp;#39;UserDict&amp;#39;, &amp;#39;encodings.ascii&amp;#39;, &amp;#39;sys&amp;#39;, &amp;#39;_osx_support&amp;#39;, &amp;#39;codecs&amp;#39;, &amp;#39;os.path&amp;#39;, &amp;#39;sitecustomize&amp;#39;, &amp;#39;signal&amp;#39;, &amp;#39;traceback&amp;#39;, &amp;#39;linecache&amp;#39;, &amp;#39;posix&amp;#39;, &amp;#39;encodings.aliases&amp;#39;, &amp;#39;exceptions&amp;#39;, &amp;#39;sre_parse&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;_weakref&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HOLY SHIT IT WORKS!&lt;/p&gt;
&lt;h1&gt;Fin&lt;/h1&gt;
&lt;p&gt;That's it. We just compiled two Pythons and fooled around with source code for the sake of a joke. Grab yourselves a beer, friends. Victory.&lt;/p&gt;
&lt;p&gt;My super messy and not-really-prepared-for-the-general-public GitHub &lt;a href="https://github.com/amygdalama/nagini"&gt;repo&lt;/a&gt; contains both versions of Python, for reference. &lt;/p&gt;</summary><category term="python"></category><category term="harry potter"></category><category term="bootstrapping"></category><category term="cpython"></category><category term="compilers"></category><category term="grammar"></category><category term="hacker school"></category><category term="python internals"></category></entry></feed>